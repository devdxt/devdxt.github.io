var faqsNav;

(function () {

  // Disable platform and language dropdowns
  $('#platform').prop('disabled', true);
  $('#language').prop('disabled', true);

  // Populate fleets
  faqsNav = {"Functional Testing":{"Native Android":{"JAVA":{"FAQ":"Functional Testing/Native Android/JAVA/FAQ"},"JAVASCRIPT":{"FAQ":"Functional Testing/Native Android/JAVASCRIPT/FAQ"}},"Native iOS":{"JAVASCRIPT":{"FAQ":"Functional Testing/Native iOS/JAVASCRIPT/FAQ"}},"rWeb":{"JAVASCRIPT":{"FAQ":"Functional Testing/rWeb/JAVASCRIPT/FAQ"}}},"Mocking":{"Native Android":{"JAVASCRIPT":{"FAQ":"Mocking/Native Android/JAVASCRIPT/FAQ"},"Java":{"FAQ":"Mocking/Native Android/Java/FAQ"}},"Native iOS":{"JAVASCRIPT":{"FAQ":"Mocking/Native iOS/JAVASCRIPT/FAQ"}},"Services":{"JAVASCRIPT":{"FAQ":"Mocking/Services/JAVASCRIPT/FAQ"}},"rWeb":{"JAVASCRIPT":{"FAQ":"Mocking/rWeb/JAVASCRIPT/FAQ"}}},"Performance Testing":{"rWeb":{"DECLARATIVE":{"FAQ":"Performance Testing/rWeb/DECLARATIVE/FAQ"}}}};
  for (category in faqsNav) {
    $('#fleet').append('<option value="' + category + '">' + category + '</option>');
  }

  updateOutput('select');

})();


$('#fleet').change(function () {

  // Get selected value
  var val = $(this).val();

  // Reset both platforms and languages when category changes
  $('#platform').html('<option value="select">Select Platform</option>');
  $('#language').html('<option value="select">Select Language</option>');

  // Update platforms based on current selection
  populatePlatforms(val);

  updateOutput(val);

});


$('#platform').change(function () {
  
  // Get selected value
  var val = $(this).val();

  // Get other unchanged selections
  var category = $('#fleet').val();

  // Reset languages when platform changes
  $('#language').html('<option value="select">Select Language</option>');

  // Update languages based on current selection
  populateLanguages(category, val);

  // Update output
  updateOutput(category, (val !== 'select') ? val : '');
  

});


$('#language').change(function () {
  
  // Get selected value
  var val = $(this).val();

  // Get other unchanged selections
  var category = $('#fleet').val();
  var platform = $('#platform').val();

  // Update output
  updateOutput(category, platform, (val !== 'select') ? val : '');

});


// Clear filters
$('#clear').click(function () {
  $('#fleet').val('select').trigger('change');;
})


function updateOutput(category, platform, language) {

  var faqs = {"1":{"level1":"select","level2":"select","level3":"select","question":"<p>S.S. Portal: What is Self-Service Portal?</p>\n","answer":"<p>Please find details about Self-Service Portal (S.S. Portal) <a href=\"/documentation/SS%20Portal%20Introduction\">here</a></p>\n"},"2":{"level1":"select","level2":"select","level3":"select","question":"<p>S.S. Portal: How to get started on Self-Service Portal?</p>\n","answer":"<p>To get started please follow our <a href=\"/documentation/SS%20Portal%20Getting%20Started\">Getting Started Guide</a></p>\n<p>Also, for the tunnels issues I am planning to add this faq:</p>\n"},"3":{"level1":"select","level2":"select","level3":"select","question":"<p>Tunnels: Unable to start tunnels locally, what should I do?</p>\n","answer":"<p>There are various reasons that may cause this issue. Please see below:</p>\n<ul>\n<li><p>Previous process not exited: There are times where a process is running the tunnel will hang and will not allow you to connect or create tunnel again though you have already stopped your test cases. Please check any active tunnel using the below command and then and killing any id's that seem like they are still running.</p>\n<p><code>$ ps aux | grep tunnel</code></p></li>\n<li><p>SauceLabs has reached maximum tunnel count: Currently we have a limit of 60 tunnels with sauce-labs. If we have reached this limit, you will not be able to establish a new tunnel. To check total active tunnels <a href=\"http://stats.dxt.walmartlabs.com/data?filter=tunnels.walmartLabs.totalActiveTunnels\">click here</a></p></li>\n</ul>\n"},"4":{"level1":"select","level2":"select","level3":"select","question":"<p>Functional Testing: I’m having npm install failure, what should I do?</p>\n","answer":"<p>Please make sure that you’re using compatible node and npm. Check versions by node -v and npm -v</p>\n"},"5":{"level1":"select","level2":"select","level3":"select","question":"<p>Functional Testing: Which magellan command should I use to launch my test?</p>\n","answer":"<p>Please read magellan help by ./node_modules/.bin/magellan –help first. If you cannot find what you want there, or if you’re still not sure, please reach us in slack channel lised below</p>\n"},"6":{"level1":"select","level2":"select","level3":"select","question":"<p>Functional Testing: Why my test passes in one browser but fails in another one?</p>\n","answer":"<p>There are couple of things can impact the test results. Page rendering speed, css selector compatibility, viewport size or even the way element’s being rendered. However in most cases the descrepancy is because we’re not really simulating user behaviors in the test. For instance, please make sure your code is not clicking on an element that is not in the viewport.</p>\n"},"7":{"level1":"select","level2":"select","level3":"select","question":"<p>Mocking: How To Read Dynamic URLs In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/get/customerInfo/{customerid}/{zipcode}'\n  handler: function(request, reply) {\n    var params = request.params;\n    var customerid = params.customerid; // customerid is 123 if request is &quot;/get/customerInfo/123/92127&quot;\n    var zipcode = params.zipcode;       // zipcode is 92127 if request is &quot;/get/customerInfo/123/92127&quot;\n  }\n});\n</code></pre>\n"},"8":{"level1":"select","level2":"select","level3":"select","question":"<p>Mocking: How To Read Query Parameters In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var queryParams = request.query;\n    // foo would be &quot;bar&quot; if incoming request is &quot;/api/getCart?foo=bar&quot;\n    var foo = queryParams.foo;\n  }\n});\n</code></pre>\n"},"9":{"level1":"select","level2":"select","level3":"select","question":"<p>Mocking: How To Set CORS Headers?</p>\n","answer":"<p>The <a href=\"https://www.w3.org/TR/cors/\">Cross-Origin Resource Sharing</a> protocol allows browsers to make cross-origin API calls. CORS is required by web application running inside a browser which are loaded from a different domain than the API server. CORS headers are disabled by default. To enable, set <code>cors</code> to true, or to an object with the following options:</p>\n<table>\n<thead>\n<tr><th>Option</th><th style=\"text-align:center\">Description</th></tr>\n</thead>\n<tbody>\n<tr><td>origin</td><td style=\"text-align:center\">a string array of allowed origin servers <code>Access-Control-Allow-Origin</code>. Defaults to any origin ['*']</td></tr>\n<tr><td>maxAge</td><td style=\"text-align:center\">number of seconds the browser should cache the CORS response ('Access-Control-Max-Age'). The greater the value, the longer it will take before the browser checks for changes in policy. Defaults to 86400 (one day).</td></tr>\n<tr><td>headers</td><td style=\"text-align:center\">string array of allowed headers <code>Access-Control-Allow-Headers</code>. Defaults to <code>['Authorization', 'Content-Type', 'If-None-Match']</code>.</td></tr>\n<tr><td>additionalHeaders</td><td style=\"text-align:center\">string array of additional headers to headers. Use this to keep the default headers in place.</td></tr>\n<tr><td>methods</td><td style=\"text-align:center\">string array of allowed HTTP methods Access-Control-Allow-Methods. Defaults to <code>['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'OPTIONS']</code></td></tr>\n<tr><td>additionalMethods</td><td style=\"text-align:center\">string array of additional methods to methods. Use this to keep the default methods in place</td></tr>\n<tr><td>exposedHeaders</td><td style=\"text-align:center\">string array of exposed headers Access-Control-Expose-Headers. Defaults to <code>['WWW-Authenticate', 'Server-Authorization'</code></td></tr>\n<tr><td>additionalExposedHeaders</td><td style=\"text-align:center\">a string array of additional headers to exposedHeaders. Use this to keep the default headers in place.</td></tr>\n<tr><td>credentials</td><td style=\"text-align:center\">if true, allows user credentials to be sent Access-Control-Allow-Credentials. Defaults to false.</td></tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">var corsHeaders = {\n  origin: ['*'],\n  headers: [&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept&quot;],\n  credentials: true,\n}\n\n// Items\nshifu.route({\n  id: 'tempo',\n  label: 'Tempo',\n  path: '/tempo1',\n    \n  config: {\n    cors: corsHeaders\n  },\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n});\n</code></pre>\n"},"10":{"level1":"select","level2":"select","level3":"select","question":"<p>Saucelabs: Why we need to whitelist internal services for DMZ ?</p>\n","answer":"<p>Due to network restrictions, Saucelabs cannot access Walmart's internal services through DMZ. For Saucelabs to be able to make requests to these services, we need to whitelist these through Info Sec team.</p>\n"},"11":{"level1":"select","level2":"select","level3":"select","question":"<p>Saucelabs: How to whitelist internal services to enable inbound traffic from Saucelabs through DMZ for functional testing ?</p>\n","answer":"<ol>\n<li><p>Create SRCR  (Security Risk and Compliance Review) from <a href=\"https://egrc.wal-mart.com/archer/apps/ArcherApp/Home.aspx#workspace/74\">here</a>.Please follow this <a href=\"https://share.wal-mart.com/Sites/SecurityCRM/Shared%20Documents/Firewall%20Rule%20Documents/ISD%20Network%20Security%20Firewall%20Rule%20Guidelines.pdf\">document</a> for further details.For any help on SRCR, please follow up on the Slack channel #help_srcr</p>\n<p>Architecture diagram for Saucelabs/TestObject DMZ setup is <a href=\"https://confluence.walmart.com/pages/viewpage.action?pageId=163647559\">here</a></p></li>\n<li><p>Once the SRCR is approved, please visit the firewall rule request <a href=\"https://jira.walmart.com/servicedesk/customer/portal/521/create/1002\">service desk</a> to create a firewall request.</p>\n<ul>\n<li><p>&quot;Application and Project Name&quot; : Use your team's name + &quot;SauceLabs DMZ Network Access&quot;.  For example &quot;Grocery - SauceLabs DMZ Network Access&quot;</p></li>\n<li><p>Team Name: Your team name.  For example &quot;Checkout&quot;</p></li>\n<li><p>Technical Lead Contact: Someone on your team who is familiar with the system under test.</p></li>\n<li><p>Data Classification\nRefer to the Data Classification Chart linked from the help text next to this field.  This refers to the nature of the data available on the system under test.  If you're unsure, please email InfoSec risk team : InfosecIA@email.wal-mart.com</p></li>\n<li><p>SRCR Number: Approved SRCR</p></li>\n<li><p>Business justification\nYou can say something like &quot;To allow the SauceLabs DMZ Network Proxy to reach an internal system under test.&quot; as well as a description of what the system under test does, for example, &quot;To allow the SauceLabs DMZ Network Proxy to reach an internal system under test. This system is a QA staging environment for previewing upcoming releases of the Walmart Grocery app.&quot;</p></li>\n<li><p>Firewall rules requested:</p>\n<p>Source Address and Hostname: – support both Saucelabs and TestObject devices</p>\n<p>For Saucelabs, the addresses will be *.saucelabs.com</p>\n<p>For TestObject, the addresses will be *.testobject.com</p>\n<p>Destination Address and Hostname:\nIP of the internal system under test and Hostname of the internal system under test</p>\n<p>Port: &lt;Ports to open&gt; e.g 80 and 443</p>\n<p>Protocol: &lt;Prototol&gt; e.g HTTP and HTTPS\nPlease refer <a href=\"https://jira.walmart.com/browse/ISFWREQ-5508\">here</a> for sample ticket</p></li>\n<li><p>Type of request:\nTemporary or permanent based on your needs</p></li>\n<li><p>Team DL Email Address:\nYour team's email address</p></li>\n</ul></li>\n</ol>\n<p><strong>Please note that the whitelisting processs can take longer time to complete. We recommend to work closely with Info Sec team to expedite the process.</strong></p>\n"},"12":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVA","question":"<p>How can I use Flank to begin my Android tests?</p>\n","answer":"<p>See <a href=\"https://gecgithub01.walmart.com/otto/docs/blob/new-portal/Functional%20Testing/Native%20Android/JAVA/GettingStarted.md\">Getting started</a> and <a href=\"https://gecgithub01.walmart.com/otto/docs/blob/new-portal/Functional%20Testing/Native%20Android/JAVA/DeveloperGuide.md\">Developer Guide</a> for help.</p>\n"},"13":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVA","question":"<p>Are there any example projects I can have a look at?</p>\n","answer":"<p>Yes please see <a href=\"https://gecgithub01.walmart.com/otto/boilerplate-android-espresso-automation/tree/looper\">boilerplate-android-espresso-automation</a> and follow the <code>README</code>, also please see <a href=\"https://ci.walmart.com/view/Mobile%20looper%20test/job/boilerplate-android-espresso-automation/\">this looper example job</a>.</p>\n"},"14":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVA","question":"<p>Where can I download <code>flank.jar</code>?</p>\n","answer":"<p>You can either download flank from <a href=\"https://dl.bintray.com/flank1/Flank/Flank-1.5.0.jar\">here</a> or use the following command:</p>\n<pre><code class=\"language-bash\">curl -o Flank.jar --proxy http://gec-proxy-svr.homeoffice.wal-mart.com:8080/ \\\n--location --fail https://dl.bintray.com/flank1/Flank/Flank-1.5.0.jar\n</code></pre>\n"},"15":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVA","question":"<p>Why does gradle timeout in looper?</p>\n","answer":"<p>Please inherit the flank base looper job in your <code>.looper.yml</code> file <code>inherit: 'job://otto-Android_native'</code> or specify your own proxy via <code>JAVA_OPTS</code> variable, <code>gradle.org</code> is not whitelisted yet, some dependencies cannot be retrieved from <a href=\"http://looper.walmart.com/docs/tools/gradle.html\">gradle tool in looper</a>.</p>\n"},"16":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVA","question":"<p>Where do I go to ask questions?</p>\n","answer":"<p>Please join our Slack channel <a href=\"https://walmart.slack.com/messages/otto_flank\">#otto_flank</a> for more help.</p>\n"},"17":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>I'm having npm install failure, what should I do?</p>\n","answer":"<p>Please make sure that you're using compatible node and npm. Check versions by node -v and npm -v</p>\n<p>To install Node and NPM, click <a href=\"https://nodejs.org/en/download/\">here</a>. <strong>NPM</strong> is distributed with <a href=\"https://nodejs.org/\"><strong>Node.js</strong></a>- which means that when you download Node.js, you automatically get npm installed on your computer.</p>\n"},"18":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Which magellan command should I use to launch my test?</p>\n","answer":"<p>Please read magellan help by ./node_modules/.bin/magellan --help first. If you cannot find what you want there, or if you're still not sure, please reach us in slack channel lised below</p>\n"},"19":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How should I run my test in different devices?</p>\n","answer":"<p>If you want to test locally, please make sure corresponding dev tools are installed correctly. Also for android please make sure a proper AVD is set.</p>\n"},"20":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How should I debug my test?</p>\n","answer":"<p>Please use <a href=\"https://github.com/appium/appium-desktop\">appium desktop app</a> to get your element or coordinates.</p>\n"},"21":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Can I have this feature?</p>\n","answer":"<p>If you are asking for a customized command, please check if similar command exists in testarmada.io#API and nightwatch first. Or, if you are asking for a feature like data tools, or any other stuff that you think is useful, please ping us in slack channel.</p>\n"},"22":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>What to do if I cannot download and install some certain node packages</p>\n","answer":"<p>If it's Walmart internal npm packages are the problem ones, please follow the steps listed <a href=\"https://sde.walmart.com/docs/proximity/npm.html#downloading-packages\">here</a>.</p>\n<p><strong>Bentonville</strong>: if you cannot reach a certain public npm packages because of the proxy issue. You can either use the sample project setup on looper to get your tests run on CI, or ask people to share their node packages via Box.</p>\n"},"23":{"level1":"Functional Testing","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Cannot check in your changes</p>\n","answer":"<p>Please make sure you have write access for the repo, and you need to set the SSH key right. To check for exiting SSH Keys, click <a href=\"https://help.github.com/articles/checking-for-existing-ssh-keys/\">here</a>.  Generate a new SSH key and adding it to the ssh-agent, click <a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\">here</a>.  Add a new SSH key to your GitHub account, click <a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\">here</a>.</p>\n"},"24":{"level1":"Functional Testing","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>I'm having npm install failure, what should I do?</p>\n","answer":"<p>Please make sure that you're using compatible node and npm. Check versions by node -v and npm -v</p>\n<p>To install Node and NPM, click <a href=\"https://nodejs.org/en/download/\">here</a>. <strong>NPM</strong> is distributed with <a href=\"https://nodejs.org/\"><strong>Node.js</strong></a>- which means that when you download Node.js, you automatically get npm installed on your computer.</p>\n"},"25":{"level1":"Functional Testing","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Which magellan command should I use to launch my test?</p>\n","answer":"<p>Please read magellan help by ./node_modules/.bin/magellan --help first. If you cannot find what you want there, or if you're still not sure, please reach us in slack channel lised below</p>\n"},"26":{"level1":"Functional Testing","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How should I run my test in different devices?</p>\n","answer":"<p>If you want to test locally, please make sure corresponding dev tools are installed correctly. Also for android please make sure a proper AVD is set.</p>\n"},"27":{"level1":"Functional Testing","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How should I debug my test?</p>\n","answer":"<p>Please use <a href=\"https://github.com/appium/appium-desktop\">appium desktop app</a> to get your element or coordinates.</p>\n"},"28":{"level1":"Functional Testing","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Can I have this feature?</p>\n","answer":"<p>If you are asking for a customized command, please check if similar command exists in testarmada.io#API and nightwatch first. Or, if you are asking for a feature like data tools, or any other stuff that you think is useful, please ping us in slack channel.</p>\n"},"29":{"level1":"Functional Testing","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>What to do if I cannot download and install some certain node packages</p>\n","answer":"<p>If it's Walmart internal npm packages are the problem ones, please follow the steps listed <a href=\"https://sde.walmart.com/docs/proximity/npm.html#downloading-packages\">here</a>.</p>\n<p><strong>Bentonville</strong>: if you cannot reach a certain public npm packages because of the proxy issue. You can either use the sample project setup on looper to get your tests run on CI, or ask people to share their node packages via Box.</p>\n"},"30":{"level1":"Functional Testing","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Cannot check in your changes</p>\n","answer":"<p>Please make sure you have write access for the repo, and you need to set the SSH key right. To check for exiting SSH Keys, click <a href=\"https://help.github.com/articles/checking-for-existing-ssh-keys/\">here</a>.  Generate a new SSH key and adding it to the ssh-agent, click <a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\">here</a>.  Add a new SSH key to your GitHub account, click <a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\">here</a>.</p>\n"},"31":{"level1":"Functional Testing","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>I'm having npm install failure, what should I do?</p>\n","answer":"<p>Please make sure that you're using compatible node and npm. Check versions by node -v and npm -v</p>\n<p>To install Node and NPM, click <a href=\"https://nodejs.org/en/download/\">here</a>. <strong>NPM</strong> is distributed with <a href=\"https://nodejs.org/\"><strong>Node.js</strong></a>- which means that when you download Node.js, you automatically get npm installed on your computer.</p>\n"},"32":{"level1":"Functional Testing","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Which magellan command should I use to launch my test?</p>\n","answer":"<p>Please read magellan help by ./node_modules/.bin/magellan --help first. If you cannot find what you want there, or if you're still not sure, please reach us in slack channel lised below</p>\n"},"33":{"level1":"Functional Testing","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How should I run my test in different browsers?</p>\n","answer":"<p>If you want to test locally, Firefox and Chrome would be supported by default no matter which OS you're using. To run test in Safari, you need to follow this article. To run in IE serie, you need a Windows. Or, just simply invoke your test on saucelabs.</p>\n"},"34":{"level1":"Functional Testing","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How should I run my test in mobile browser?</p>\n","answer":"<p>Please use Saucelabs.</p>\n"},"35":{"level1":"Functional Testing","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How should I debug my test?</p>\n","answer":"<p>Right now we don't have fancy feature like block current execution --&gt; do some variable watch --&gt; resume your test. However, you can add a .pause() command before the command you want to debug, run your test and check selector from either developer tool or firebug from browser. Another option is adding tons of console.log() in your test.</p>\n"},"36":{"level1":"Functional Testing","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Why my test passes in one browser but fails in another one?</p>\n","answer":"<p>There are couple of things can impact the test results. Page rendering speed, css selector compatibility, viewport size or even the way element's being rendered. However in most cases the descrepancy is because we're not really simulating user behaviors in the test. For instance, please make sure your code is not clicking on an element that is not in the viewport.</p>\n"},"37":{"level1":"Functional Testing","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Can I have this feature?</p>\n","answer":"<p>If you are asking for a customized command, please check if similar command exists in testarmada.io#API and nightwatch first. Or, if you are asking for a feature like data tools, or any other stuff that you think is useful, please ping us in slack channel.</p>\n"},"38":{"level1":"Functional Testing","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>What to do if I cannot download and install some certain node packages</p>\n","answer":"<p>If it's Walmart internal npm packages are the problem ones, please follow the steps listed <a href=\"https://sde.walmart.com/docs/proximity/npm.html#downloading-packages\">here</a>.</p>\n<p><strong>Bentonville</strong>: if you cannot reach a certain public npm packages because of the proxy issue. You can either use the sample project setup on looper to get your tests run on CI, or ask people to share their node packages via Box.</p>\n"},"39":{"level1":"Functional Testing","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Cannot check in your changes</p>\n","answer":"<p>Please make sure you have write access for the repo, and you need to set the SSH key right. To check for exiting SSH Keys, click <a href=\"https://help.github.com/articles/checking-for-existing-ssh-keys/\">here</a>.  Generate a new SSH key and adding it to the ssh-agent, click <a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\">here</a>.  Add a new SSH key to your GitHub account, click <a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\">here</a>.</p>\n"},"40":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>What Can Be Mocked?</p>\n","answer":"<p>Any Restful service API can be mocked such as:</p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>OPTIONS</li>\n<li>and so on..</li>\n</ul>\n"},"41":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Can AJAX Calls Be Mocked?</p>\n","answer":"<p>Yes - It is same as for any other backend service. For AJAX call, point it to the mocked server instance instead of\nthe actual back end service and add a mocked route in the file containing mocked routes for mock server.</p>\n"},"42":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>What Are The Pre-Requisites?</p>\n","answer":"<ul>\n<li>node.js 4+ (npm is included in the package)</li>\n<li>If inside of Walmart you need npm access to the internal <a href=\"https://confluence.walmart.com/display/PGPTOOLS/NPM+and+Nexus\">nexus/npm repo</a></li>\n</ul>\n"},"43":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How Can I Add Mock Server Dependency To My Node Project?</p>\n","answer":"<pre><code class=\"language-javascript\">&quot;dependencies&quot;: {\n  &quot;@walmart/shifu&quot;: &quot;3.0.4&quot; // add the latest version\n}\n</code></pre>\n"},"44":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Add A Mocked Route?</p>\n","answer":"<p>Add the following code in your routes file, typically <code>endpoints.js</code></p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'helloWorld',                 // required\n  label: 'Hello World',             // Used for Mock Server UI\n  path: '/helloWorld',              // the path you want to mock\n  method: 'GET',                    // The Rest Method you want to mock for this API\n  handler: function (req, reply) {  // Add Logic to massage data before returning back to the request.\n    reply('Hello World');\n  }\n});\n</code></pre>\n"},"45":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Why do I see <code>No routes defined for this path</code> ?</p>\n","answer":"<p>Any undefined routes in Shifu will be responsed with a user friendly message <code>No routes defined for this path</code>.</p>\n"},"46":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Create Dynamic URLs?</p>\n","answer":"<p>By adding the URL part in curly brackets that you would liek to by dynamic such as <code>/get/customerInfo/{customerid}/{zipcode}</code></p>\n<p>For example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'customerInfo',\n  label: 'Customer Info',\n  path: '/get/customerInfo/{customerid}/{zipcode}', // both customerid and zipcode will be dynamic\n  method: 'GET',\n  variantLabel: 'Get Customer Info',\n  handler: function (req, reply) {\n    reply('How to read the customer id :(');\n  }\n});\n</code></pre>\n"},"47":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Read Dynamic URLs In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/get/customerInfo/{customerid}/{zipcode}'\n  handler: function(request, reply) { \n    var params = request.params;\n    var customerid = params.customerid; // customerid is 123 if request is &quot;/get/customerInfo/123/92127&quot;\n    var zipcode = params.zipcode;       // zipcode is 92127 if request is &quot;/get/customerInfo/123/92127&quot;\n  }\n}); \n</code></pre>\n"},"48":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Read Header Parameters In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var headers = request.raw.req.headers;\n    var authorization = headers.authorization;\n    if(authorization) {\n       // do something\n    }\n    reply().code(204);\n  }\n}); \n</code></pre>\n"},"49":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Read Payload In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var payload = request.payload;\n    // foo would be &quot;bar&quot; if the posted body content (as JSON) is {&quot;foo&quot;: &quot;bar&quot;}\n    var foo = payload.foo;\n  }\n}); \n</code></pre>\n"},"50":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Read Query Parameters In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var queryParams = request.query;\n    // foo would be &quot;bar&quot; if incoming request is &quot;/api/getCart?foo=bar&quot;\n    var foo = queryParams.foo;\n  }\n}); \n</code></pre>\n"},"51":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How to read url parameters in request ?</p>\n","answer":"<p>To read the dynamic URL parameters in request with in the route, use <code>request.params</code></p>\n<pre><code>var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/customer/{id}'\n  handler: function(req, reply) {\n    // would be &quot;123&quot; if the endpiont hit was &quot;/api/customer/123&quot;\n    var id = request.params.id;\n  }\n});\n</code></pre>\n"},"52":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How to add delay to response?</p>\n","answer":"<p>A mocked response can also be delayed by some time specified by the user. You can simulate a delay (in ms) by passing delay as follows :</p>\n<pre><code>shifu.route({\n  id: 'message',\n  label: 'Hello Variants',\n  path: '/message',\n\n  variantLabel: 'hello world',\n  handler: function (req, reply) {\n    shifu.util.respondWithFile(this, reply, {code: 202});\n  }\n})\n.variant({\n    id: 'variant with delay',\n    label: 'variant with delay',\n    handler: function (req, reply) {\n      shifu.util.respondWithFile(this, reply, {filePath: './message/GET/variant_with_delay.json', delay: 1000});\n    }\n  });\n</code></pre>\n"},"53":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Set Custom Headers In Mocked Response?</p>\n","answer":"<h3>Preferred Way</h3>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'header',\n  label: 'Test Headers',\n  path: '/api/testHeaders',\n  handler: function (req, reply) {\n    var myHeaders = {\n      header1: 'test1',\n      header2: 'test2',\n      header3: true\n    };\n    shifu.util.respondWithFile(this, reply, {headers: myHeaders});\n  }\n});\n</code></pre>\n<h3>Alternate Way</h3>\n<p>To set custom headers, call <code>header(name, value, options)</code> on reply object, where</p>\n<p><code>name</code> is the header name\n<code>value</code> is the header value\n<code>options</code> is an optional object with the following attributes</p>\n<table>\n<thead>\n<tr><th>Attribute</th><th style=\"text-align:center\">Description</th></tr>\n</thead>\n<tbody>\n<tr><td>append</td><td style=\"text-align:center\">if <code>true</code>, the value is appended to any existing header value using separator. Defaults to <code>false</code>.</td></tr>\n<tr><td>separator</td><td style=\"text-align:center\">string used as separator when appending to an exiting value. Defaults to <code>','</code></td></tr>\n<tr><td>override</td><td style=\"text-align:center\">if <code>false</code>, the header value is not set if an existing value present. Defaults to <code>true</code></td></tr>\n<tr><td>duplicate</td><td style=\"text-align:center\">if <code>false</code>, the header value is not modified if the provided value is already included. Does not apply when append is false or if the name is 'set-cookie'. Defaults to <code>true</code></td></tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'Get Collection',\n  label: 'Get Collections',\n  path: '/product/grouping/api/collection/{collectionId}',\n  handler: function(req, reply) {\n  reply({message: 'test'})\n    .header('X-Res-Header', 'I\\'m a custom response header')\n  }\n});\n</code></pre>\n"},"54":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Set Custom Cookies In Mocked Response?</p>\n","answer":"<h3>Preferred Way</h3>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'cookie',\n  label: 'Test Cookies',\n  path: '/api/testCookies',\n  handler: function (req, reply) {\n    var cookies = [\n      {name: 'com.wm.customer', value: 'vz7.0b5c56'},\n      {name: 'CID', value: 'SmockedCID', options: {domain: 'domain', path: '/'}},\n      {name: 'anotherCookie', value: 'cookieValue'}\n    ];\n    \n    shifu.util.respondWithFile(this, reply, {cookies: cookies});\n  }\n});\n</code></pre>\n<h3>Alternate Way</h3>\n<p>To set custom cookies, call <code>state(name, value, options)</code> on reply object, where\n<code>name</code> is the cookie name\n<code>value</code> is the cookie value\n<code>options</code> is the server state options settings found <a href=\"https://hapijs.com/api#serverstatename-options\">here</a></p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'Get Collection',\n  label: 'Get Collections',\n  path: '/product/grouping/api/collection/{collectionId}',\n  handler: function(req, reply) {\n      reply({message: 'test'})\n       .state('test-cookie', 'I\\'m a custom response cookie')\n  }\n});  \n</code></pre>\n"},"55":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Set CORS Headers?</p>\n","answer":"<p>The <a href=\"https://www.w3.org/TR/cors/\">Cross-Origin Resource Sharing</a> protocol allows browsers to make cross-origin API calls. CORS is required by web application running inside a browser which are loaded from a different domain than the API server. CORS headers are disabled by default. To enable, set <code>cors</code> to true, or to an object with the following options:</p>\n<table>\n<thead>\n<tr><th>Option</th><th style=\"text-align:center\">Description</th></tr>\n</thead>\n<tbody>\n<tr><td>origin</td><td style=\"text-align:center\">a string array of allowed origin servers <code>Access-Control-Allow-Origin</code>. Defaults to any origin ['*']</td></tr>\n<tr><td>maxAge</td><td style=\"text-align:center\">number of seconds the browser should cache the CORS response ('Access-Control-Max-Age'). The greater the value, the longer it will take before the browser checks for changes in policy. Defaults to 86400 (one day).</td></tr>\n<tr><td>headers</td><td style=\"text-align:center\">string array of allowed headers <code>Access-Control-Allow-Headers</code>. Defaults to <code>['Authorization', 'Content-Type', 'If-None-Match']</code>.</td></tr>\n<tr><td>additionalHeaders</td><td style=\"text-align:center\">string array of additional headers to headers. Use this to keep the default headers in place.</td></tr>\n<tr><td>methods</td><td style=\"text-align:center\">string array of allowed HTTP methods Access-Control-Allow-Methods. Defaults to <code>['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'OPTIONS']</code></td></tr>\n<tr><td>additionalMethods</td><td style=\"text-align:center\">string array of additional methods to methods. Use this to keep the default methods in place</td></tr>\n<tr><td>exposedHeaders</td><td style=\"text-align:center\">string array of exposed headers Access-Control-Expose-Headers. Defaults to <code>['WWW-Authenticate', 'Server-Authorization'</code></td></tr>\n<tr><td>additionalExposedHeaders</td><td style=\"text-align:center\">a string array of additional headers to exposedHeaders. Use this to keep the default headers in place.</td></tr>\n<tr><td>credentials</td><td style=\"text-align:center\">if true, allows user credentials to be sent Access-Control-Allow-Credentials. Defaults to false.</td></tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">var corsHeaders = {\n  origin: ['*'],\n  headers: [&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept&quot;],\n  credentials: true,\n}\n\n// Items\nshifu.route({\n  id: 'tempo',\n  label: 'Tempo',\n  path: '/tempo1',\n    \n  config: {\n    cors: corsHeaders\n  },\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n});\n</code></pre>\n"},"56":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>What Is <code>respondWithFile</code> Utility?</p>\n","answer":"<p>This feature allows you to respond with a data stored in a file instead of hard coding the response data in the routes definition. This way user does not have to hard-code/change the response in handler and rather can just swap the file with different data without even bringing the server down.</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n      id: 'ResponseFromFile',\n      label: 'Response From File',\n      path: '/get/fromFile',\n      handler: function(req, reply) {\n        shifu.util.respondWithFile(this, reply);\n      }\n  });\n</code></pre>\n<p>In the above example, mock server will automatically look for a file <code>default.{some_extension}</code>  at <code>./mocked-data/get/fromFile/GET/default.{some_extension}</code></p>\n"},"57":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How File Path Is Calculated For <code>respondWithFile</code> Utility?</p>\n","answer":"<p>The path to the mocked data file is auto-calculated based on the route path. For example if the route path is /get/cart than for the default variant, mock server will look for the <code>default.{some_extension}</code> file at <code>./mocked-data/get/fromFile/GET/default.{some_extension}</code>. For variants, the name of the file should be changed from default to the variant name as shown below:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'ResponseFromFile',\n  label: 'Response From File',\n  path: '/get/fromFile',\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n})\n.variant({\n  id: 'textData',\n  label: 'Text Data',\n  handler: function (req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n});\n</code></pre>\n<p>In above example mock server will look for <code>./resources/mocked-data/get/fromFile/GET/textData.{some_extension} file for the variant textData</code></p>\n"},"58":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Can I Provide A Custom File Location <code>respondWithFile</code> Utility?</p>\n","answer":"<p>Yes. By adding <code>filePath</code> parameter as shown in below example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'CustomResponseFile',\n  label: 'Response From Custom Path',\n  path: '/get/customFile',\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply, {filePath: './custom.json'});\n  }\n});\n</code></pre>\n<p>In above example mock server will look for the file under MockedDirectory only but at <code>./mocked-data/custom.json</code></p>\n"},"59":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Respond Only With Code?</p>\n","answer":"<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'hello message',\n  path: '/message',\n  handler: function(req, reply) {\n    reply().code(400);\n  }\n});\n</code></pre>\n"},"60":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Can I Return A Response Code With <code>respondWithFile</code> Utility?</p>\n","answer":"<p>Yes - by adding <code>code</code> parameter as shown in below example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'hello message',\n  path: '/message',\n \n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply, {code: 400});\n  }\n});\n</code></pre>\n"},"61":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>What Is MockedDirectory Path?</p>\n","answer":"<p>Mocked directory path is the location to the base directory where all your mocked response file will be stored. This parameter is defined in run-mock-server-console.js file. It is defined at the start of mock server as shown in the code below:</p>\n<pre><code class=\"language-javascript\">require('./endpoints');\nrequire('@walmart/shifu').start({\n  host: &quot;localhost&quot;,\n  mockedDirectory: &quot;./resources/mocked-data&quot;,\n  port: 8000,\n  project: 'HelloShifu',\n  metricsDB: 'http://kairos.prod.rapido.globalproducts.prod.walmart.com/api/v1/datapoints'\n});\n</code></pre>\n"},"62":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Location For Response File For RespondWithFile?</p>\n","answer":"<p>If you have set your default folder to be <code>mocked-data</code>, then based on your URL path:</p>\n<p>For default variant, mock server will look for <code>./mocked-data/product/grouping/api/collection/GET/default.json</code>\nand for <code>mixItem</code> variant mock server will look for <code>./mocked-data/product/grouping/api/collection/GET/mixItem.json</code></p>\n"},"63":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>What Are Variants?</p>\n","answer":"<p>Variants allows to return a different data set for a given mocked route. Variants can be selected either in the admin UI or through automation APIs to determine what type of response a route should have. Routes are defined using the variant method on the Route object (returned by calling the route method). An object parameter is provided with the following attributes</p>\n<ul>\n<li>id: the variant id - used for the RESTful admin API and profile settings</li>\n<li>label: (optional) the variant label - used for display on the admin panel</li>\n<li>handler: (optional) the HAPI route handler which provides the route response</li>\n</ul>\n<p>Variants are useful because they allow you to test multiple scenarios that can happen with your route. Say, for example, you have a route exposing the ability to update a password. You might have several exceptional scenarios that you would want to test out (each could be a variant that you simply select to tell the route handler to use the appropriate response)</p>\n<ul>\n<li>the password was reset successfully</li>\n<li>the password didn't pass validation</li>\n<li>the old password wasn't entered correctly</li>\n<li>the username doesn't exist</li>\n<li>and so on...</li>\n</ul>\n"},"64":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Add A Variant To A Route?</p>\n","answer":"<p>To add a one or more variants do the following:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'Message',\n  path: '/get/message',\n  method: 'GET',\n  variantLabel: 'Hello',\n  handler: function (req, reply) {\n    reply('Hello');\n  }\n})\n \n.variant({\n    id: 'hello',\n    label: 'Hello World',\n    handler: function (req, reply) {\n      reply('Hello World');\n    }\n  })\n\n.variant({\n    id: 'hello',\n    label: 'Hello Universe',\n    handler: function (req, reply) {\n      reply('Hello Universe');\n    }\n  });  \n</code></pre>\n"},"65":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Switch Variants In Test Case?</p>\n","answer":"<pre><code>browser.setMockVariant({ fixture: &quot;fixture id&quot;, variant: &quot;variant id&quot; }); \n</code></pre>\n"},"66":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How To Switch Variants With HTTP Call?</p>\n","answer":"<p>You can also switch the variants via HTTP call (Recommended only when not using Shifu as a library). As an example, if you want to set variant to <code>helloUniverse</code> for the route below:</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n    id: 'helloWorld',\n    label: 'Hello World',\n    path: '/helloWorld',\n    method: 'GET',\n    handler: function (req, reply) {\n      reply('Hello World');\n    }\n  })\n  .variant({\n    id: 'helloUniverse',\n    label: 'Hello Universe',\n    handler: function (req, reply) {\n      reply('Hello Universe');\n    }\n  });\n</code></pre>\n<pre><code>curl  -H &quot;Content-type: application/json&quot; -X POST -d '{&quot;variant&quot;:&quot;&lt;variant&gt;&quot;}' &lt;host&gt;:&lt;port&gt;/shifu/api/route/&lt;routeId&gt;\n</code></pre>\n<p>So for the above route, you can switch the variant to <code>helloUniverse</code> like this:</p>\n<pre><code>curl  -H &quot;Content-type: application/json&quot; -X POST -d '{&quot;variant&quot;:&quot;helloUniverse&quot;}' http://localhost:8000/shifu/api/route/helloWorld\n</code></pre>\n<p>When using parallel sessions, if you want to switch a variant for a route for a particular session, register the session with mock server like this:</p>\n<pre><code>curl &lt;host&gt;:&lt;port&gt;/shifu/api/registerSession\n\n// e.g \ncurl http://localhost:8000/shifu/api/registerSession\n</code></pre>\n<p>If sessions are available, mock server will return a response like:</p>\n<pre><code> {&quot;session&quot;:&quot;33b08d&quot;}\n</code></pre>\n<p>Extract the session id from response and append it to the route id you want to switch variant for e.g:</p>\n<pre><code>curl -H &quot;Content-type: application/json&quot; -X POST -d &quot;variant&quot;:&quot;helloUniverse&quot;}' http://localhost:8000/shifu/api/route/helloWorld-33b08d\n</code></pre>\n"},"67":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Can I reset all variants for all the routes?</p>\n","answer":"<p>Yes. Please refer <a href=\"/documentation/Mocking/rWeb/JAVASCRIPT/API%20Guide#reset-all-variants---resetallvariants\">resetAllVariants</a> in API guide section.</p>\n"},"68":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>What Is Mock Server UI Used For?</p>\n","answer":"<p>UI can be used to view and test mocked routes as well as for manual switching of variants when running tests manually.</p>\n"},"69":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>What Is Parallel Sessions?</p>\n","answer":"<p>Parallel sessions allows you to run multiple instance of server virtually while running only one server. This is helpful when you are running multiple test cases which access the same routes but different variants as parallel sessions allow you to set different variants on same routes without conflicting. This saves CPU and RAM both as only one server is running instead of multiple. Please see the call flow explaination without and with Parallel Sessions Below:</p>\n<h3>Call Flow Without Parallel Sessions</h3>\n<p>![without_parallel_sessions]</p>\n<h3>Call Flow With Parallel Sessions</h3>\n<p>![with_parallel_sessions]</p>\n"},"70":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How Can I Enable Parallel Sessions On Mock Server?</p>\n","answer":"<p>Add <code>sessions</code> parameter with number of virtual services you want as shown in below example while startung mock Server.</p>\n<pre><code class=\"language-javascript\">require('./endpoints');\nvar shifu = require('@walmart/shifu');\nshifu.start({\n  host: &quot;localhost&quot;,\n  mockedDirectory: &quot;./resources/mocked-data&quot;,\n  port: 8000,\n  sessions: 2,\n  project: 'HelloShifu',\n  metricsDB: 'http://kairos.prod.rapido.globalproducts.prod.walmart.com/api/v1/datapoints'\n});\n</code></pre>\n"},"71":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How Can I Register a Session For Parallel Sessions?</p>\n","answer":"<pre><code class=\"language-javascript\">var sessionId = shifu.registerSession();\n</code></pre>\n"},"72":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How Can I Close A Session For Parallel Sessions?</p>\n","answer":"<pre><code class=\"language-javascript\">var closeSession = shifu.closeSession(sessionId);\n</code></pre>\n"},"73":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Does Mock Server Has Any Utility To Modify JSON Data Stored In Files?</p>\n","answer":"<p>Yes - Mock Server exposes <code>transpose</code> option that cna be passed in <code>respondWithFile</code> method to modify the JSON files dynamically.</p>\n"},"74":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How Does <code>transposeData</code> Work To Modify JSON Data Stored In Files?</p>\n","answer":"<p>If you have many variants for a Rest end point and the mocked data for all variants can use the same JSON response with few changes to the values, than this feature is what you need. This feature allows you to dynamically change a JSON file before sending the response back from the mock server for the request. It removes the need of having one to one mapping of static JSON files with each variants.</p>\n<pre><code class=\"language-javascript\">// Static Response JSON File\n{\n id: &quot;1234&quot;,\n name: &quot;toothpaste&quot;\n details: [\n   {\n    flavor: &quot;Mint 1&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n    },\n   {\n    flavor: &quot;Mint&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n   }\n ]\n}\n\n// Sample code for substituting id from 1234 to 7777 and flavor from Mint to Mint 2 for second array element in routes\nshifu.route({\n    id: 'Get Collection',\n    label: 'Get Collections',\n    path: '/product/grouping/api/collection/{collectionId}',\n \n    handler: function(req, reply) {\n      var dataToChange = {\n        'id': '7777',\n        'details[1].flavor': 'Mint 2'\n      }\n      shifu.util.respondWithFile(this, reply, {transpose: dataToChange}); \n    }\n});\n\n// Dynamic Response JSON File returned from Mock service\n{\n id: &quot;7777&quot;,\n name: &quot;toothpaste&quot;\n details: [\n   {\n    flavor: &quot;Mint 1&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n    },\n   {\n    flavor: &quot;Mint 2&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n   }\n ]\n}\n</code></pre>\n"},"75":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Can I Use <code>transposeData</code> Functionality Outside Of <code>respondWithFile</code>?</p>\n","answer":"<p>Yes - You can use it by Shifu Utils.</p>\n<pre><code class=\"language-javascript\">var fileLocation = require(&quot;path&quot;).join(__dirname, './resources/test-data/data-transposition-test.json');\nvar dataSet = utils.readJsonFile(fileLocation);\nvar dataToChange = {\n 'items.item[0].id': 1234, // substitue id 0001 to 1234\n 'items.item[0].val': &quot;value&quot;, // Add 'val' to first array element of items.item\n 'items.item[1].id': 4567, // Add 'id' to second array element of items.item\n 'items.item[0].batters.batter[0].id': 5678 // substitue id 1001 to 5678\n}\nsubstitutedData = shifu.util.transposeData(dataSet, dataToChange);\n\n// Base JSON file - data-transposition-test.json\n{\n  &quot;items&quot;:\n  {\n    &quot;item&quot;:\n    [\n      {\n        &quot;id&quot;: &quot;0001&quot;,\n        &quot;type&quot;: &quot;donut&quot;,\n        &quot;name&quot;: &quot;Cake&quot;,\n        &quot;ppu&quot;: 0.55,\n        &quot;batters&quot;:\n        {\n          &quot;type&quot; : 1,\n          &quot;batter&quot;:\n          [\n            { &quot;id&quot;: &quot;1001&quot;, &quot;type&quot;: &quot;Regular&quot; },\n          ]\n        },\n        &quot;topping&quot;:\n        [\n          { &quot;id&quot;: &quot;5001&quot;, &quot;type&quot;: &quot;None&quot; }\n        ]\n      }\n    ]\n  }\n};\n\n// Resulted JSON\n{\n  &quot;items&quot;: {\n    &quot;item&quot;: [\n      {\n        &quot;id&quot;: 1234,\n        &quot;type&quot;: &quot;donut&quot;,\n        &quot;name&quot;: &quot;Cake&quot;,\n        &quot;ppu&quot;: 0.55,\n        &quot;val&quot;: &quot;value&quot;\n        &quot;batters&quot;: {\n          &quot;type&quot;: 1,\n          &quot;batter&quot;: [\n            {&quot;id&quot;: 5678, &quot;type&quot;: &quot;Regular&quot;}\n          ]\n        },\n        &quot;topping&quot;: [\n          {&quot;id&quot;: &quot;5001&quot;, &quot;type&quot;: &quot;None&quot;}\n        ]\n      },\n      {\n        &quot;id&quot;: 4567\n      }\n    ]\n  }\n};\n</code></pre>\n"},"76":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>Why Mock Server Returns Error 415 Unsupported Media Type?</p>\n","answer":"<p>If you're using content type like <code>application/graphql</code>, follow this example</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n    id: 'id',\n    label: 'id',\n    path: '/graphql',\n    method: ['POST', 'PUT'],\n    config : {\n      payload: {\n        parse: false,\n        allow: 'application/graphql'\n      }\n    },\n    handler: function (req, reply) {\n      shifu.util.respondWithFile(this, reply, {code: 200});\n    }\n  });\n</code></pre>\n<p>For more details, <a href=\"https://stackoverflow.com/questions/34640307/support-additional-mime-types-in-hapi\">read this</a></p>\n"},"77":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How to send meta information for response ?</p>\n","answer":"<p>Mocked responses can also have meta information that can be set in the response files itself. For example :</p>\n<pre><code>{\n  &quot;setHeaders&quot;: {\n    &quot;date&quot;: &quot;Fri, 06 Jan 2017 03:33:22 GMT&quot;,\n    &quot;content-type&quot;: &quot;text/html; charset=UTF-8&quot;,\n    &quot;transfer-encoding&quot;: &quot;chunked&quot;,\n    &quot;connection&quot;: &quot;close&quot;,\n    &quot;set-cookie&quot;: [\n      &quot;__cfduid=d7502270409ade5544a5a60d0fbd7652a1483673602; expires=Sat, 06-Jan-18 03:33:22 GMT; path=/; domain=.typicode.com; HttpOnly&quot;\n    ],\n    &quot;x-powered-by&quot;: &quot;Express&quot;,\n    &quot;vary&quot;: &quot;Accept-Encoding&quot;,\n    &quot;access-control-allow-credentials&quot;: &quot;true&quot;,\n    &quot;cache-control&quot;: &quot;public, max-age=14400&quot;,\n    &quot;last-modified&quot;: &quot;Thu, 05 Jan 2017 07:28:00 GMT&quot;,\n    &quot;via&quot;: &quot;1.1 vegur&quot;,\n    &quot;cf-cache-status&quot;: &quot;HIT&quot;,\n    &quot;expires&quot;: &quot;Fri, 06 Jan 2017 07:33:22 GMT&quot;,\n    &quot;server&quot;: &quot;cloudflare-nginx&quot;,\n    &quot;cf-ray&quot;: &quot;31cc1baee47b11fb-SJC&quot;\n  },\n  &quot;setCode&quot;:201,\n  &quot;setPayload&quot;: &quot;resources/mocked-data/message/GET/file_read_from_recorded_file.txt&quot;,\n  &quot;setContentType&quot;: &quot;text/plain; charset=utf-8&quot;\n}\n</code></pre>\n<p>The above file is going to set the headers of the response from Shifu according to <code>headers</code> provided in <code>setHeaders</code>, <code>code</code> provided in <code>setCode</code> , <code>contentType</code> provided in <code>setContentType</code> and <code>payload</code> provided in <code>setPayload</code>. If <code>setPayload</code> is a path of the file intended to be responded with, then Shifu will look for the file and respond with the content of that file. If <code>setPayload</code> is JSON content, then Shifu will respond with JSON content.</p>\n<p>The above functionality makes sure that Shifu is able to handle all the file types when responding with recorded mocked data.</p>\n<p>In order to test different scenarios, you can add/delete/update header information in the <code>setHeaders</code> value. Or if you need to change the <code>contentType</code> of the response, you can simply replace value of <code>setContentType</code>.</p>\n<p>Please note that <code>setContentType</code> will take precedence over <code>content-type</code> header value. If <code>setContentType</code> is not provided then, HTTP will set the contentType of the file according to file type.</p>\n"},"78":{"level1":"Mocking","level2":"Native Android","level3":"JAVASCRIPT","question":"<p>How to add Shifu custom commands to Nightwatch?</p>\n","answer":"<p>To add mock server custom commands to control the Shifu server in your end to end tests, add the following in <code>nightwatch.json</code>:</p>\n<pre><code>&quot;custom_commands_path&quot;: [\n    ...\n    &quot;./node_modules/shifu-magellan-nightwatch/commands&quot;\n  ],\n</code></pre>\n"},"79":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>What Is Shifu?</p>\n","answer":"<p>Shifu is a mocking tool for Android that is run on the emulator/device. It's a library that is is setup and controlled from the Android tests. It has full support for http &amp; https and also supports record and playback.</p>\n"},"80":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>What Are The Benefits Of Shifu?</p>\n","answer":"<ul>\n<li>Easy to setup and use</li>\n<li>No dependencies to extra APK or computer. Its a simple jar that works on both emulators and devices</li>\n<li>Shifu can be built into the test APK by using androidTestCompile</li>\n<li>Completely tailored for Android with a rich set of API:s</li>\n<li>Full support for http &amp; https</li>\n<li>Supports Record &amp; Replay</li>\n</ul>\n"},"81":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>How Do I Get Started?</p>\n","answer":"<p>Please see <a href=\"https://gecgithub01.walmart.com/otto/shifu-java/wiki/Getting-Started\">getting started</a></p>\n"},"82":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>Where Can I Download a Boilerplate Project?</p>\n","answer":"<p>Please download an <a href=\"https://gecgithub01.walmart.com/otto/boilerplate-shifu-android\">example project here</a></p>\n"},"83":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>How Does Record &amp; Replay Work?</p>\n","answer":"<p>Please see this page on <a href=\"https://gecgithub01.walmart.com/otto/shifu-java/wiki/Record-&amp;-Playback\">record &amp; playback</a></p>\n"},"84":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>What Can Be Mocked?</p>\n","answer":"<p>Any Restful service API can be mocked such as:</p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>OPTIONS</li>\n<li>and so on..</li>\n</ul>\n"},"85":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>Can AJAX Calls Be Mocked?</p>\n","answer":"<p>Yes - It is same as for any other backend service. For AJAX call, point it to the mocked server instance instead of\nthe actual back end service and add a mocked route in the file containing mocked routes for mock server.</p>\n"},"86":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>What Are The Pre-Requisites?</p>\n","answer":"<ul>\n<li>Android API level 16</li>\n</ul>\n"},"87":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>How Can I Add Mock Server Dependency To My Android Project?</p>\n","answer":"<p><strong>Set dependency in build.gradle:</strong></p>\n<pre><code>maven {\n    url 'http://gec-maven-nexus.walmart.com/nexus/content/repositories/thirdparty'\n}\n\ndependencies {\n    androidTestCompile 'com.walmart.otto:shifu:1.8.2'\n}\n</code></pre>\n"},"88":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>How Do I Start Shifu?</p>\n","answer":"<p>Add the following code in your test class</p>\n<pre><code>@Rule\npublic ShifuRule shifuRule = new ShifuRule(new Shifu.Config(), InstrumentationRegistry.getTargetContext());\n</code></pre>\n"},"89":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>How Do I Add A Mock?</p>\n","answer":"<pre><code>//For a request url matching &quot;/example/example.*&quot; shifu will return ex.json that is located in the assets folder\n        \nshifu.mock(get(urlMatching(&quot;/example/example.*&quot;)).willReturn(aResponse().withStatus(233).withBodyFile(&quot;ex.json&quot;)));\n</code></pre>\n"},"90":{"level1":"Mocking","level2":"Native Android","level3":"Java","question":"<p>How Do I Mock A Complete Directory?</p>\n","answer":"<pre><code>//WithBodyFileInMockedDirectory can be used when setting Shifu.Config.mockedDirectory \nso that full urls are not needed, only a path from the folder set in Config.mockedDirectory. \n        \nshifu.mock(post(urlMatching(&quot;/example/ex.jsp&quot;)).willReturn(aResponse().withBodyFileInMockedDirectory(&quot;ex.json)));\n        \n</code></pre>\n"},"91":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>What Can Be Mocked?</p>\n","answer":"<p>Any Restful service API can be mocked such as:</p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>OPTIONS</li>\n<li>and so on..</li>\n</ul>\n"},"92":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Can AJAX Calls Be Mocked?</p>\n","answer":"<p>Yes - It is same as for any other backend service. For AJAX call, point it to the mocked server instance instead of\nthe actual back end service and add a mocked route in the file containing mocked routes for mock server.</p>\n"},"93":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>What Are The Pre-Requisites?</p>\n","answer":"<ul>\n<li>node.js 4+ (npm is included in the package)</li>\n<li>If inside of Walmart you need npm access to the internal <a href=\"https://confluence.walmart.com/display/PGPTOOLS/NPM+and+Nexus\">nexus/npm repo</a></li>\n</ul>\n"},"94":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How Can I Add Mock Server Dependency To My Node Project?</p>\n","answer":"<pre><code class=\"language-javascript\">&quot;dependencies&quot;: {\n  &quot;@walmart/shifu&quot;: &quot;3.0.4&quot; // add the latest version\n}\n</code></pre>\n"},"95":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Add A Mocked Route?</p>\n","answer":"<p>Add the following code in your routes file, typically <code>endpoints.js</code></p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'helloWorld',                 // required\n  label: 'Hello World',             // Used for Mock Server UI\n  path: '/helloWorld',              // the path you want to mock\n  method: 'GET',                    // The Rest Method you want to mock for this API\n  handler: function (req, reply) {  // Add Logic to massage data before returning back to the request.\n    reply('Hello World');\n  }\n});\n</code></pre>\n"},"96":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Why do I see <code>No routes defined for this path</code> ?</p>\n","answer":"<p>Any undefined routes in Shifu will be responsed with a user friendly message <code>No routes defined for this path</code>.</p>\n"},"97":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Create Dynamic URLs?</p>\n","answer":"<p>By adding the URL part in curly brackets that you would liek to by dynamic such as <code>/get/customerInfo/{customerid}/{zipcode}</code></p>\n<p>For example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'customerInfo',\n  label: 'Customer Info',\n  path: '/get/customerInfo/{customerid}/{zipcode}', // both customerid and zipcode will be dynamic\n  method: 'GET',\n  variantLabel: 'Get Customer Info',\n  handler: function (req, reply) {\n    reply('How to read the customer id :(');\n  }\n});\n</code></pre>\n"},"98":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Read Dynamic URLs In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/get/customerInfo/{customerid}/{zipcode}'\n  handler: function(request, reply) { \n    var params = request.params;\n    var customerid = params.customerid; // customerid is 123 if request is &quot;/get/customerInfo/123/92127&quot;\n    var zipcode = params.zipcode;       // zipcode is 92127 if request is &quot;/get/customerInfo/123/92127&quot;\n  }\n}); \n</code></pre>\n"},"99":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Read Header Parameters In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var headers = request.raw.req.headers;\n    var authorization = headers.authorization;\n    if(authorization) {\n       // do something\n    }\n    reply().code(204);\n  }\n}); \n</code></pre>\n"},"100":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Read Payload In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var payload = request.payload;\n    // foo would be &quot;bar&quot; if the posted body content (as JSON) is {&quot;foo&quot;: &quot;bar&quot;}\n    var foo = payload.foo;\n  }\n}); \n</code></pre>\n"},"101":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Read Query Parameters In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var queryParams = request.query;\n    // foo would be &quot;bar&quot; if incoming request is &quot;/api/getCart?foo=bar&quot;\n    var foo = queryParams.foo;\n  }\n}); \n</code></pre>\n"},"102":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How to read url parameters in request ?</p>\n","answer":"<p>To read the dynamic URL parameters in request with in the route, use <code>request.params</code></p>\n<pre><code>var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/customer/{id}'\n  handler: function(req, reply) {\n    // would be &quot;123&quot; if the endpiont hit was &quot;/api/customer/123&quot;\n    var id = request.params.id;\n  }\n});\n</code></pre>\n"},"103":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How to add delay to response?</p>\n","answer":"<p>A mocked response can also be delayed by some time specified by the user. You can simulate a delay (in ms) by passing delay as follows :</p>\n<pre><code>shifu.route({\n  id: 'message',\n  label: 'Hello Variants',\n  path: '/message',\n\n  variantLabel: 'hello world',\n  handler: function (req, reply) {\n    shifu.util.respondWithFile(this, reply, {code: 202});\n  }\n})\n.variant({\n    id: 'variant with delay',\n    label: 'variant with delay',\n    handler: function (req, reply) {\n      shifu.util.respondWithFile(this, reply, {filePath: './message/GET/variant_with_delay.json', delay: 1000});\n    }\n  });\n</code></pre>\n"},"104":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Set Custom Headers In Mocked Response?</p>\n","answer":"<h3>Preferred Way</h3>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'header',\n  label: 'Test Headers',\n  path: '/api/testHeaders',\n  handler: function (req, reply) {\n    var myHeaders = {\n      header1: 'test1',\n      header2: 'test2',\n      header3: true\n    };\n    shifu.util.respondWithFile(this, reply, {headers: myHeaders});\n  }\n});\n</code></pre>\n<h3>Alternate Way</h3>\n<p>To set custom headers, call <code>header(name, value, options)</code> on reply object, where</p>\n<p><code>name</code> is the header name\n<code>value</code> is the header value\n<code>options</code> is an optional object with the following attributes</p>\n<table>\n<thead>\n<tr><th>Attribute</th><th style=\"text-align:center\">Description</th></tr>\n</thead>\n<tbody>\n<tr><td>append</td><td style=\"text-align:center\">if <code>true</code>, the value is appended to any existing header value using separator. Defaults to <code>false</code>.</td></tr>\n<tr><td>separator</td><td style=\"text-align:center\">string used as separator when appending to an exiting value. Defaults to <code>','</code></td></tr>\n<tr><td>override</td><td style=\"text-align:center\">if <code>false</code>, the header value is not set if an existing value present. Defaults to <code>true</code></td></tr>\n<tr><td>duplicate</td><td style=\"text-align:center\">if <code>false</code>, the header value is not modified if the provided value is already included. Does not apply when append is false or if the name is 'set-cookie'. Defaults to <code>true</code></td></tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'Get Collection',\n  label: 'Get Collections',\n  path: '/product/grouping/api/collection/{collectionId}',\n  handler: function(req, reply) {\n  reply({message: 'test'})\n    .header('X-Res-Header', 'I\\'m a custom response header')\n  }\n});\n</code></pre>\n"},"105":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Set Custom Cookies In Mocked Response?</p>\n","answer":"<h3>Preferred Way</h3>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'cookie',\n  label: 'Test Cookies',\n  path: '/api/testCookies',\n  handler: function (req, reply) {\n    var cookies = [\n      {name: 'com.wm.customer', value: 'vz7.0b5c56'},\n      {name: 'CID', value: 'SmockedCID', options: {domain: 'domain', path: '/'}},\n      {name: 'anotherCookie', value: 'cookieValue'}\n    ];\n    \n    shifu.util.respondWithFile(this, reply, {cookies: cookies});\n  }\n});\n</code></pre>\n<h3>Alternate Way</h3>\n<p>To set custom cookies, call <code>state(name, value, options)</code> on reply object, where\n<code>name</code> is the cookie name\n<code>value</code> is the cookie value\n<code>options</code> is the server state options settings found <a href=\"https://hapijs.com/api#serverstatename-options\">here</a></p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'Get Collection',\n  label: 'Get Collections',\n  path: '/product/grouping/api/collection/{collectionId}',\n  handler: function(req, reply) {\n      reply({message: 'test'})\n       .state('test-cookie', 'I\\'m a custom response cookie')\n  }\n});  \n</code></pre>\n"},"106":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Set CORS Headers?</p>\n","answer":"<p>The <a href=\"https://www.w3.org/TR/cors/\">Cross-Origin Resource Sharing</a> protocol allows browsers to make cross-origin API calls. CORS is required by web application running inside a browser which are loaded from a different domain than the API server. CORS headers are disabled by default. To enable, set <code>cors</code> to true, or to an object with the following options:</p>\n<table>\n<thead>\n<tr><th>Option</th><th style=\"text-align:center\">Description</th></tr>\n</thead>\n<tbody>\n<tr><td>origin</td><td style=\"text-align:center\">a string array of allowed origin servers <code>Access-Control-Allow-Origin</code>. Defaults to any origin ['*']</td></tr>\n<tr><td>maxAge</td><td style=\"text-align:center\">number of seconds the browser should cache the CORS response ('Access-Control-Max-Age'). The greater the value, the longer it will take before the browser checks for changes in policy. Defaults to 86400 (one day).</td></tr>\n<tr><td>headers</td><td style=\"text-align:center\">string array of allowed headers <code>Access-Control-Allow-Headers</code>. Defaults to <code>['Authorization', 'Content-Type', 'If-None-Match']</code>.</td></tr>\n<tr><td>additionalHeaders</td><td style=\"text-align:center\">string array of additional headers to headers. Use this to keep the default headers in place.</td></tr>\n<tr><td>methods</td><td style=\"text-align:center\">string array of allowed HTTP methods Access-Control-Allow-Methods. Defaults to <code>['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'OPTIONS']</code></td></tr>\n<tr><td>additionalMethods</td><td style=\"text-align:center\">string array of additional methods to methods. Use this to keep the default methods in place</td></tr>\n<tr><td>exposedHeaders</td><td style=\"text-align:center\">string array of exposed headers Access-Control-Expose-Headers. Defaults to <code>['WWW-Authenticate', 'Server-Authorization'</code></td></tr>\n<tr><td>additionalExposedHeaders</td><td style=\"text-align:center\">a string array of additional headers to exposedHeaders. Use this to keep the default headers in place.</td></tr>\n<tr><td>credentials</td><td style=\"text-align:center\">if true, allows user credentials to be sent Access-Control-Allow-Credentials. Defaults to false.</td></tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">var corsHeaders = {\n  origin: ['*'],\n  headers: [&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept&quot;],\n  credentials: true,\n}\n\n// Items\nshifu.route({\n  id: 'tempo',\n  label: 'Tempo',\n  path: '/tempo1',\n    \n  config: {\n    cors: corsHeaders\n  },\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n});\n</code></pre>\n"},"107":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>What Is <code>respondWithFile</code> Utility?</p>\n","answer":"<p>This feature allows you to respond with a data stored in a file instead of hard coding the response data in the routes definition. This way user does not have to hard-code/change the response in handler and rather can just swap the file with different data without even bringing the server down.</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n      id: 'ResponseFromFile',\n      label: 'Response From File',\n      path: '/get/fromFile',\n      handler: function(req, reply) {\n        shifu.util.respondWithFile(this, reply);\n      }\n  });\n</code></pre>\n<p>In the above example, mock server will automatically look for a file <code>default.{some_extension}</code>  at <code>./mocked-data/get/fromFile/GET/default.{some_extension}</code></p>\n"},"108":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How File Path Is Calculated For <code>respondWithFile</code> Utility?</p>\n","answer":"<p>The path to the mocked data file is auto-calculated based on the route path. For example if the route path is /get/cart than for the default variant, mock server will look for the <code>default.{some_extension}</code> file at <code>./mocked-data/get/fromFile/GET/default.{some_extension}</code>. For variants, the name of the file should be changed from default to the variant name as shown below:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'ResponseFromFile',\n  label: 'Response From File',\n  path: '/get/fromFile',\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n})\n.variant({\n  id: 'textData',\n  label: 'Text Data',\n  handler: function (req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n});\n</code></pre>\n<p>In above example mock server will look for <code>./resources/mocked-data/get/fromFile/GET/textData.{some_extension} file for the variant textData</code></p>\n"},"109":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Can I Provide A Custom File Location <code>respondWithFile</code> Utility?</p>\n","answer":"<p>Yes. By adding <code>filePath</code> parameter as shown in below example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'CustomResponseFile',\n  label: 'Response From Custom Path',\n  path: '/get/customFile',\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply, {filePath: './custom.json'});\n  }\n});\n</code></pre>\n<p>In above example mock server will look for the file under MockedDirectory only but at <code>./mocked-data/custom.json</code></p>\n"},"110":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Respond Only With Code?</p>\n","answer":"<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'hello message',\n  path: '/message',\n  handler: function(req, reply) {\n    reply().code(400);\n  }\n});\n</code></pre>\n"},"111":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Can I Return A Response Code With <code>respondWithFile</code> Utility?</p>\n","answer":"<p>Yes - by adding <code>code</code> parameter as shown in below example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'hello message',\n  path: '/message',\n \n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply, {code: 400});\n  }\n});\n</code></pre>\n"},"112":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>What Is MockedDirectory Path?</p>\n","answer":"<p>Mocked directory path is the location to the base directory where all your mocked response file will be stored. This parameter is defined in run-mock-server-console.js file. It is defined at the start of mock server as shown in the code below:</p>\n<pre><code class=\"language-javascript\">require('./endpoints');\nrequire('@walmart/shifu').start({\n  host: &quot;localhost&quot;,\n  mockedDirectory: &quot;./resources/mocked-data&quot;,\n  port: 8000,\n  project: 'HelloShifu',\n  metricsDB: 'http://kairos.prod.rapido.globalproducts.prod.walmart.com/api/v1/datapoints'\n});\n</code></pre>\n"},"113":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Location For Response File For RespondWithFile?</p>\n","answer":"<p>If you have set your default folder to be <code>mocked-data</code>, then based on your URL path:</p>\n<p>For default variant, mock server will look for <code>./mocked-data/product/grouping/api/collection/GET/default.json</code>\nand for <code>mixItem</code> variant mock server will look for <code>./mocked-data/product/grouping/api/collection/GET/mixItem.json</code></p>\n"},"114":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>What Are Variants?</p>\n","answer":"<p>Variants allows to return a different data set for a given mocked route. Variants can be selected either in the admin UI or through automation APIs to determine what type of response a route should have. Routes are defined using the variant method on the Route object (returned by calling the route method). An object parameter is provided with the following attributes</p>\n<ul>\n<li>id: the variant id - used for the RESTful admin API and profile settings</li>\n<li>label: (optional) the variant label - used for display on the admin panel</li>\n<li>handler: (optional) the HAPI route handler which provides the route response</li>\n</ul>\n<p>Variants are useful because they allow you to test multiple scenarios that can happen with your route. Say, for example, you have a route exposing the ability to update a password. You might have several exceptional scenarios that you would want to test out (each could be a variant that you simply select to tell the route handler to use the appropriate response)</p>\n<ul>\n<li>the password was reset successfully</li>\n<li>the password didn't pass validation</li>\n<li>the old password wasn't entered correctly</li>\n<li>the username doesn't exist</li>\n<li>and so on...</li>\n</ul>\n"},"115":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Add A Variant To A Route?</p>\n","answer":"<p>To add a one or more variants do the following:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'Message',\n  path: '/get/message',\n  method: 'GET',\n  variantLabel: 'Hello',\n  handler: function (req, reply) {\n    reply('Hello');\n  }\n})\n \n.variant({\n    id: 'hello',\n    label: 'Hello World',\n    handler: function (req, reply) {\n      reply('Hello World');\n    }\n  })\n\n.variant({\n    id: 'hello',\n    label: 'Hello Universe',\n    handler: function (req, reply) {\n      reply('Hello Universe');\n    }\n  });  \n</code></pre>\n"},"116":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Switch Variants In Test Case?</p>\n","answer":"<pre><code>browser.setMockVariant({ fixture: &quot;fixture id&quot;, variant: &quot;variant id&quot; }); \n</code></pre>\n"},"117":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How To Switch Variants With HTTP Call?</p>\n","answer":"<p>You can also switch the variants via HTTP call (Recommended only when not using Shifu as a library). As an example, if you want to set variant to <code>helloUniverse</code> for the route below:</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n    id: 'helloWorld',\n    label: 'Hello World',\n    path: '/helloWorld',\n    method: 'GET',\n    handler: function (req, reply) {\n      reply('Hello World');\n    }\n  })\n  .variant({\n    id: 'helloUniverse',\n    label: 'Hello Universe',\n    handler: function (req, reply) {\n      reply('Hello Universe');\n    }\n  });\n</code></pre>\n<pre><code>curl  -H &quot;Content-type: application/json&quot; -X POST -d '{&quot;variant&quot;:&quot;&lt;variant&gt;&quot;}' &lt;host&gt;:&lt;port&gt;/shifu/api/route/&lt;routeId&gt;\n</code></pre>\n<p>So for the above route, you can switch the variant to <code>helloUniverse</code> like this:</p>\n<pre><code>curl  -H &quot;Content-type: application/json&quot; -X POST -d '{&quot;variant&quot;:&quot;helloUniverse&quot;}' http://localhost:8000/shifu/api/route/helloWorld\n</code></pre>\n<p>When using parallel sessions, if you want to switch a variant for a route for a particular session, register the session with mock server like this:</p>\n<pre><code>curl &lt;host&gt;:&lt;port&gt;/shifu/api/registerSession\n\n// e.g \ncurl http://localhost:8000/shifu/api/registerSession\n</code></pre>\n<p>If sessions are available, mock server will return a response like:</p>\n<pre><code> {&quot;session&quot;:&quot;33b08d&quot;}\n</code></pre>\n<p>Extract the session id from response and append it to the route id you want to switch variant for e.g:</p>\n<pre><code>curl -H &quot;Content-type: application/json&quot; -X POST -d &quot;variant&quot;:&quot;helloUniverse&quot;}' http://localhost:8000/shifu/api/route/helloWorld-33b08d\n</code></pre>\n"},"118":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Can I reset all variants for all the routes?</p>\n","answer":"<p>Yes. Please refer <a href=\"/documentation/Mocking/rWeb/JAVASCRIPT/API%20Guide#reset-all-variants---resetallvariants\">resetAllVariants</a> in API guide section.</p>\n"},"119":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>What Is Mock Server UI Used For?</p>\n","answer":"<p>UI can be used to view and test mocked routes as well as for manual switching of variants when running tests manually.</p>\n"},"120":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>What Is Parallel Sessions?</p>\n","answer":"<p>Parallel sessions allows you to run multiple instance of server virtually while running only one server. This is helpful when you are running multiple test cases which access the same routes but different variants as parallel sessions allow you to set different variants on same routes without conflicting. This saves CPU and RAM both as only one server is running instead of multiple. Please see the call flow explaination without and with Parallel Sessions Below:</p>\n<h3>Call Flow Without Parallel Sessions</h3>\n<p>![without_parallel_sessions]</p>\n<h3>Call Flow With Parallel Sessions</h3>\n<p>![with_parallel_sessions]</p>\n"},"121":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How Can I Enable Parallel Sessions On Mock Server?</p>\n","answer":"<p>Add <code>sessions</code> parameter with number of virtual services you want as shown in below example while startung mock Server.</p>\n<pre><code class=\"language-javascript\">require('./endpoints');\nvar shifu = require('@walmart/shifu');\nshifu.start({\n  host: &quot;localhost&quot;,\n  mockedDirectory: &quot;./resources/mocked-data&quot;,\n  port: 8000,\n  sessions: 2,\n  project: 'HelloShifu',\n  metricsDB: 'http://kairos.prod.rapido.globalproducts.prod.walmart.com/api/v1/datapoints'\n});\n</code></pre>\n"},"122":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How Can I Register a Session For Parallel Sessions?</p>\n","answer":"<pre><code class=\"language-javascript\">var sessionId = shifu.registerSession();\n</code></pre>\n"},"123":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How Can I Close A Session For Parallel Sessions?</p>\n","answer":"<pre><code class=\"language-javascript\">var closeSession = shifu.closeSession(sessionId);\n</code></pre>\n"},"124":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Does Mock Server Has Any Utility To Modify JSON Data Stored In Files?</p>\n","answer":"<p>Yes - Mock Server exposes <code>transpose</code> option that cna be passed in <code>respondWithFile</code> method to modify the JSON files dynamically.</p>\n"},"125":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How Does <code>transposeData</code> Work To Modify JSON Data Stored In Files?</p>\n","answer":"<p>If you have many variants for a Rest end point and the mocked data for all variants can use the same JSON response with few changes to the values, than this feature is what you need. This feature allows you to dynamically change a JSON file before sending the response back from the mock server for the request. It removes the need of having one to one mapping of static JSON files with each variants.</p>\n<pre><code class=\"language-javascript\">// Static Response JSON File\n{\n id: &quot;1234&quot;,\n name: &quot;toothpaste&quot;\n details: [\n   {\n    flavor: &quot;Mint 1&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n    },\n   {\n    flavor: &quot;Mint&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n   }\n ]\n}\n\n// Sample code for substituting id from 1234 to 7777 and flavor from Mint to Mint 2 for second array element in routes\nshifu.route({\n    id: 'Get Collection',\n    label: 'Get Collections',\n    path: '/product/grouping/api/collection/{collectionId}',\n \n    handler: function(req, reply) {\n      var dataToChange = {\n        'id': '7777',\n        'details[1].flavor': 'Mint 2'\n      }\n      shifu.util.respondWithFile(this, reply, {transpose: dataToChange}); \n    }\n});\n\n// Dynamic Response JSON File returned from Mock service\n{\n id: &quot;7777&quot;,\n name: &quot;toothpaste&quot;\n details: [\n   {\n    flavor: &quot;Mint 1&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n    },\n   {\n    flavor: &quot;Mint 2&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n   }\n ]\n}\n</code></pre>\n"},"126":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Can I Use <code>transposeData</code> Functionality Outside Of <code>respondWithFile</code>?</p>\n","answer":"<p>Yes - You can use it by Shifu Utils.</p>\n<pre><code class=\"language-javascript\">var fileLocation = require(&quot;path&quot;).join(__dirname, './resources/test-data/data-transposition-test.json');\nvar dataSet = utils.readJsonFile(fileLocation);\nvar dataToChange = {\n 'items.item[0].id': 1234, // substitue id 0001 to 1234\n 'items.item[0].val': &quot;value&quot;, // Add 'val' to first array element of items.item\n 'items.item[1].id': 4567, // Add 'id' to second array element of items.item\n 'items.item[0].batters.batter[0].id': 5678 // substitue id 1001 to 5678\n}\nsubstitutedData = shifu.util.transposeData(dataSet, dataToChange);\n\n// Base JSON file - data-transposition-test.json\n{\n  &quot;items&quot;:\n  {\n    &quot;item&quot;:\n    [\n      {\n        &quot;id&quot;: &quot;0001&quot;,\n        &quot;type&quot;: &quot;donut&quot;,\n        &quot;name&quot;: &quot;Cake&quot;,\n        &quot;ppu&quot;: 0.55,\n        &quot;batters&quot;:\n        {\n          &quot;type&quot; : 1,\n          &quot;batter&quot;:\n          [\n            { &quot;id&quot;: &quot;1001&quot;, &quot;type&quot;: &quot;Regular&quot; },\n          ]\n        },\n        &quot;topping&quot;:\n        [\n          { &quot;id&quot;: &quot;5001&quot;, &quot;type&quot;: &quot;None&quot; }\n        ]\n      }\n    ]\n  }\n};\n\n// Resulted JSON\n{\n  &quot;items&quot;: {\n    &quot;item&quot;: [\n      {\n        &quot;id&quot;: 1234,\n        &quot;type&quot;: &quot;donut&quot;,\n        &quot;name&quot;: &quot;Cake&quot;,\n        &quot;ppu&quot;: 0.55,\n        &quot;val&quot;: &quot;value&quot;\n        &quot;batters&quot;: {\n          &quot;type&quot;: 1,\n          &quot;batter&quot;: [\n            {&quot;id&quot;: 5678, &quot;type&quot;: &quot;Regular&quot;}\n          ]\n        },\n        &quot;topping&quot;: [\n          {&quot;id&quot;: &quot;5001&quot;, &quot;type&quot;: &quot;None&quot;}\n        ]\n      },\n      {\n        &quot;id&quot;: 4567\n      }\n    ]\n  }\n};\n</code></pre>\n"},"127":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>Why Mock Server Returns Error 415 Unsupported Media Type?</p>\n","answer":"<p>If you're using content type like <code>application/graphql</code>, follow this example</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n    id: 'id',\n    label: 'id',\n    path: '/graphql',\n    method: ['POST', 'PUT'],\n    config : {\n      payload: {\n        parse: false,\n        allow: 'application/graphql'\n      }\n    },\n    handler: function (req, reply) {\n      shifu.util.respondWithFile(this, reply, {code: 200});\n    }\n  });\n</code></pre>\n<p>For more details, <a href=\"https://stackoverflow.com/questions/34640307/support-additional-mime-types-in-hapi\">read this</a></p>\n"},"128":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How to send meta information for response ?</p>\n","answer":"<p>Mocked responses can also have meta information that can be set in the response files itself. For example :</p>\n<pre><code>{\n  &quot;setHeaders&quot;: {\n    &quot;date&quot;: &quot;Fri, 06 Jan 2017 03:33:22 GMT&quot;,\n    &quot;content-type&quot;: &quot;text/html; charset=UTF-8&quot;,\n    &quot;transfer-encoding&quot;: &quot;chunked&quot;,\n    &quot;connection&quot;: &quot;close&quot;,\n    &quot;set-cookie&quot;: [\n      &quot;__cfduid=d7502270409ade5544a5a60d0fbd7652a1483673602; expires=Sat, 06-Jan-18 03:33:22 GMT; path=/; domain=.typicode.com; HttpOnly&quot;\n    ],\n    &quot;x-powered-by&quot;: &quot;Express&quot;,\n    &quot;vary&quot;: &quot;Accept-Encoding&quot;,\n    &quot;access-control-allow-credentials&quot;: &quot;true&quot;,\n    &quot;cache-control&quot;: &quot;public, max-age=14400&quot;,\n    &quot;last-modified&quot;: &quot;Thu, 05 Jan 2017 07:28:00 GMT&quot;,\n    &quot;via&quot;: &quot;1.1 vegur&quot;,\n    &quot;cf-cache-status&quot;: &quot;HIT&quot;,\n    &quot;expires&quot;: &quot;Fri, 06 Jan 2017 07:33:22 GMT&quot;,\n    &quot;server&quot;: &quot;cloudflare-nginx&quot;,\n    &quot;cf-ray&quot;: &quot;31cc1baee47b11fb-SJC&quot;\n  },\n  &quot;setCode&quot;:201,\n  &quot;setPayload&quot;: &quot;resources/mocked-data/message/GET/file_read_from_recorded_file.txt&quot;,\n  &quot;setContentType&quot;: &quot;text/plain; charset=utf-8&quot;\n}\n</code></pre>\n<p>The above file is going to set the headers of the response from Shifu according to <code>headers</code> provided in <code>setHeaders</code>, <code>code</code> provided in <code>setCode</code> , <code>contentType</code> provided in <code>setContentType</code> and <code>payload</code> provided in <code>setPayload</code>. If <code>setPayload</code> is a path of the file intended to be responded with, then Shifu will look for the file and respond with the content of that file. If <code>setPayload</code> is JSON content, then Shifu will respond with JSON content.</p>\n<p>The above functionality makes sure that Shifu is able to handle all the file types when responding with recorded mocked data.</p>\n<p>In order to test different scenarios, you can add/delete/update header information in the <code>setHeaders</code> value. Or if you need to change the <code>contentType</code> of the response, you can simply replace value of <code>setContentType</code>.</p>\n<p>Please note that <code>setContentType</code> will take precedence over <code>content-type</code> header value. If <code>setContentType</code> is not provided then, HTTP will set the contentType of the file according to file type.</p>\n"},"129":{"level1":"Mocking","level2":"Native iOS","level3":"JAVASCRIPT","question":"<p>How to add Shifu custom commands to Nightwatch?</p>\n","answer":"<p>To add mock server custom commands to control the Shifu server in your end to end tests, add the following in <code>nightwatch.json</code>:</p>\n<pre><code>&quot;custom_commands_path&quot;: [\n    ...\n    &quot;./node_modules/shifu-magellan-nightwatch/commands&quot;\n  ],\n</code></pre>\n"},"130":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>What Can Be Mocked?</p>\n","answer":"<p>Any Restful service API can be mocked such as:</p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>OPTIONS</li>\n<li>and so on..</li>\n</ul>\n"},"131":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>Can AJAX Calls Be Mocked?</p>\n","answer":"<p>Yes - It is same as for any other backend service. For AJAX call, point it to the mocked server instance instead of\nthe actual back end service and add a mocked route in the file containing mocked routes for mock server.</p>\n"},"132":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>What Are The Pre-Requisites?</p>\n","answer":"<ul>\n<li>node.js 4+ (npm is included in the package)</li>\n<li>If inside of Walmart you need npm access to the internal <a href=\"https://confluence.walmart.com/display/PGPTOOLS/NPM+and+Nexus\">nexus/npm repo</a></li>\n</ul>\n"},"133":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How Can I Add Mock Server Dependency To My Node Project?</p>\n","answer":"<pre><code class=\"language-javascript\">&quot;dependencies&quot;: {\n  &quot;@walmart/shifu&quot;: &quot;3.0.4&quot; // add the latest version\n}\n</code></pre>\n"},"134":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Add A Mocked Route?</p>\n","answer":"<p>Add the following code in your routes file, typically <code>endpoints.js</code></p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'helloWorld',                 // required\n  label: 'Hello World',             // Used for Mock Server UI\n  path: '/helloWorld',              // the path you want to mock\n  method: 'GET',                    // The Rest Method you want to mock for this API\n  handler: function (req, reply) {  // Add Logic to massage data before returning back to the request.\n    reply('Hello World');\n  }\n});\n</code></pre>\n"},"135":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>Why do I see <code>No routes defined for this path</code> ?</p>\n","answer":"<p>Any undefined routes in Shifu will be responsed with a user friendly message <code>No routes defined for this path</code>.</p>\n"},"136":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Create Dynamic URLs?</p>\n","answer":"<p>By adding the URL part in curly brackets that you would liek to by dynamic such as <code>/get/customerInfo/{customerid}/{zipcode}</code></p>\n<p>For example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'customerInfo',\n  label: 'Customer Info',\n  path: '/get/customerInfo/{customerid}/{zipcode}', // both customerid and zipcode will be dynamic\n  method: 'GET',\n  variantLabel: 'Get Customer Info',\n  handler: function (req, reply) {\n    reply('How to read the customer id :(');\n  }\n});\n</code></pre>\n"},"137":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Read Dynamic URLs In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/get/customerInfo/{customerid}/{zipcode}'\n  handler: function(request, reply) { \n    var params = request.params;\n    var customerid = params.customerid; // customerid is 123 if request is &quot;/get/customerInfo/123/92127&quot;\n    var zipcode = params.zipcode;       // zipcode is 92127 if request is &quot;/get/customerInfo/123/92127&quot;\n  }\n}); \n</code></pre>\n"},"138":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Read Header Parameters In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var headers = request.raw.req.headers;\n    var authorization = headers.authorization;\n    if(authorization) {\n       // do something\n    }\n    reply().code(204);\n  }\n}); \n</code></pre>\n"},"139":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Read Payload In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var payload = request.payload;\n    // foo would be &quot;bar&quot; if the posted body content (as JSON) is {&quot;foo&quot;: &quot;bar&quot;}\n    var foo = payload.foo;\n  }\n}); \n</code></pre>\n"},"140":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Read Query Parameters In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var queryParams = request.query;\n    // foo would be &quot;bar&quot; if incoming request is &quot;/api/getCart?foo=bar&quot;\n    var foo = queryParams.foo;\n  }\n}); \n</code></pre>\n"},"141":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How to read url parameters in request ?</p>\n","answer":"<p>To read the dynamic URL parameters in request with in the route, use <code>request.params</code></p>\n<pre><code>var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/customer/{id}'\n  handler: function(req, reply) {\n    // would be &quot;123&quot; if the endpiont hit was &quot;/api/customer/123&quot;\n    var id = request.params.id;\n  }\n});\n</code></pre>\n"},"142":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How to add delay to response?</p>\n","answer":"<p>A mocked response can also be delayed by some time specified by the user. You can simulate a delay (in ms) by passing delay as follows :</p>\n<pre><code>shifu.route({\n  id: 'message',\n  label: 'Hello Variants',\n  path: '/message',\n\n  variantLabel: 'hello world',\n  handler: function (req, reply) {\n    shifu.util.respondWithFile(this, reply, {code: 202});\n  }\n})\n.variant({\n    id: 'variant with delay',\n    label: 'variant with delay',\n    handler: function (req, reply) {\n      shifu.util.respondWithFile(this, reply, {filePath: './message/GET/variant_with_delay.json', delay: 1000});\n    }\n  });\n</code></pre>\n"},"143":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Set Custom Headers In Mocked Response?</p>\n","answer":"<h3>Preferred Way</h3>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'header',\n  label: 'Test Headers',\n  path: '/api/testHeaders',\n  handler: function (req, reply) {\n    var myHeaders = {\n      header1: 'test1',\n      header2: 'test2',\n      header3: true\n    };\n    shifu.util.respondWithFile(this, reply, {headers: myHeaders});\n  }\n});\n</code></pre>\n<h3>Alternate Way</h3>\n<p>To set custom headers, call <code>header(name, value, options)</code> on reply object, where</p>\n<p><code>name</code> is the header name\n<code>value</code> is the header value\n<code>options</code> is an optional object with the following attributes</p>\n<table>\n<thead>\n<tr><th>Attribute</th><th style=\"text-align:center\">Description</th></tr>\n</thead>\n<tbody>\n<tr><td>append</td><td style=\"text-align:center\">if <code>true</code>, the value is appended to any existing header value using separator. Defaults to <code>false</code>.</td></tr>\n<tr><td>separator</td><td style=\"text-align:center\">string used as separator when appending to an exiting value. Defaults to <code>','</code></td></tr>\n<tr><td>override</td><td style=\"text-align:center\">if <code>false</code>, the header value is not set if an existing value present. Defaults to <code>true</code></td></tr>\n<tr><td>duplicate</td><td style=\"text-align:center\">if <code>false</code>, the header value is not modified if the provided value is already included. Does not apply when append is false or if the name is 'set-cookie'. Defaults to <code>true</code></td></tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'Get Collection',\n  label: 'Get Collections',\n  path: '/product/grouping/api/collection/{collectionId}',\n  handler: function(req, reply) {\n  reply({message: 'test'})\n    .header('X-Res-Header', 'I\\'m a custom response header')\n  }\n});\n</code></pre>\n"},"144":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Set Custom Cookies In Mocked Response?</p>\n","answer":"<h3>Preferred Way</h3>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'cookie',\n  label: 'Test Cookies',\n  path: '/api/testCookies',\n  handler: function (req, reply) {\n    var cookies = [\n      {name: 'com.wm.customer', value: 'vz7.0b5c56'},\n      {name: 'CID', value: 'SmockedCID', options: {domain: 'domain', path: '/'}},\n      {name: 'anotherCookie', value: 'cookieValue'}\n    ];\n    \n    shifu.util.respondWithFile(this, reply, {cookies: cookies});\n  }\n});\n</code></pre>\n<h3>Alternate Way</h3>\n<p>To set custom cookies, call <code>state(name, value, options)</code> on reply object, where\n<code>name</code> is the cookie name\n<code>value</code> is the cookie value\n<code>options</code> is the server state options settings found <a href=\"https://hapijs.com/api#serverstatename-options\">here</a></p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'Get Collection',\n  label: 'Get Collections',\n  path: '/product/grouping/api/collection/{collectionId}',\n  handler: function(req, reply) {\n      reply({message: 'test'})\n       .state('test-cookie', 'I\\'m a custom response cookie')\n  }\n});  \n</code></pre>\n"},"145":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Set CORS Headers?</p>\n","answer":"<p>The <a href=\"https://www.w3.org/TR/cors/\">Cross-Origin Resource Sharing</a> protocol allows browsers to make cross-origin API calls. CORS is required by web application running inside a browser which are loaded from a different domain than the API server. CORS headers are disabled by default. To enable, set <code>cors</code> to true, or to an object with the following options:</p>\n<table>\n<thead>\n<tr><th>Option</th><th style=\"text-align:center\">Description</th></tr>\n</thead>\n<tbody>\n<tr><td>origin</td><td style=\"text-align:center\">a string array of allowed origin servers <code>Access-Control-Allow-Origin</code>. Defaults to any origin ['*']</td></tr>\n<tr><td>maxAge</td><td style=\"text-align:center\">number of seconds the browser should cache the CORS response ('Access-Control-Max-Age'). The greater the value, the longer it will take before the browser checks for changes in policy. Defaults to 86400 (one day).</td></tr>\n<tr><td>headers</td><td style=\"text-align:center\">string array of allowed headers <code>Access-Control-Allow-Headers</code>. Defaults to <code>['Authorization', 'Content-Type', 'If-None-Match']</code>.</td></tr>\n<tr><td>additionalHeaders</td><td style=\"text-align:center\">string array of additional headers to headers. Use this to keep the default headers in place.</td></tr>\n<tr><td>methods</td><td style=\"text-align:center\">string array of allowed HTTP methods Access-Control-Allow-Methods. Defaults to <code>['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'OPTIONS']</code></td></tr>\n<tr><td>additionalMethods</td><td style=\"text-align:center\">string array of additional methods to methods. Use this to keep the default methods in place</td></tr>\n<tr><td>exposedHeaders</td><td style=\"text-align:center\">string array of exposed headers Access-Control-Expose-Headers. Defaults to <code>['WWW-Authenticate', 'Server-Authorization'</code></td></tr>\n<tr><td>additionalExposedHeaders</td><td style=\"text-align:center\">a string array of additional headers to exposedHeaders. Use this to keep the default headers in place.</td></tr>\n<tr><td>credentials</td><td style=\"text-align:center\">if true, allows user credentials to be sent Access-Control-Allow-Credentials. Defaults to false.</td></tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">var corsHeaders = {\n  origin: ['*'],\n  headers: [&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept&quot;],\n  credentials: true,\n}\n\n// Items\nshifu.route({\n  id: 'tempo',\n  label: 'Tempo',\n  path: '/tempo1',\n    \n  config: {\n    cors: corsHeaders\n  },\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n});\n</code></pre>\n"},"146":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>What Is <code>respondWithFile</code> Utility?</p>\n","answer":"<p>This feature allows you to respond with a data stored in a file instead of hard coding the response data in the routes definition. This way user does not have to hard-code/change the response in handler and rather can just swap the file with different data without even bringing the server down.</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n      id: 'ResponseFromFile',\n      label: 'Response From File',\n      path: '/get/fromFile',\n      handler: function(req, reply) {\n        shifu.util.respondWithFile(this, reply);\n      }\n  });\n</code></pre>\n<p>In the above example, mock server will automatically look for a file <code>default.{some_extension}</code>  at <code>./mocked-data/get/fromFile/GET/default.{some_extension}</code></p>\n"},"147":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How File Path Is Calculated For <code>respondWithFile</code> Utility?</p>\n","answer":"<p>The path to the mocked data file is auto-calculated based on the route path. For example if the route path is /get/cart than for the default variant, mock server will look for the <code>default.{some_extension}</code> file at <code>./mocked-data/get/fromFile/GET/default.{some_extension}</code>. For variants, the name of the file should be changed from default to the variant name as shown below:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'ResponseFromFile',\n  label: 'Response From File',\n  path: '/get/fromFile',\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n})\n.variant({\n  id: 'textData',\n  label: 'Text Data',\n  handler: function (req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n});\n</code></pre>\n<p>In above example mock server will look for <code>./resources/mocked-data/get/fromFile/GET/textData.{some_extension} file for the variant textData</code></p>\n"},"148":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>Can I Provide A Custom File Location <code>respondWithFile</code> Utility?</p>\n","answer":"<p>Yes. By adding <code>filePath</code> parameter as shown in below example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'CustomResponseFile',\n  label: 'Response From Custom Path',\n  path: '/get/customFile',\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply, {filePath: './custom.json'});\n  }\n});\n</code></pre>\n<p>In above example mock server will look for the file under MockedDirectory only but at <code>./mocked-data/custom.json</code></p>\n"},"149":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Respond Only With Code?</p>\n","answer":"<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'hello message',\n  path: '/message',\n  handler: function(req, reply) {\n    reply().code(400);\n  }\n});\n</code></pre>\n"},"150":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>Can I Return A Response Code With <code>respondWithFile</code> Utility?</p>\n","answer":"<p>Yes - by adding <code>code</code> parameter as shown in below example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'hello message',\n  path: '/message',\n \n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply, {code: 400});\n  }\n});\n</code></pre>\n"},"151":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>What Is MockedDirectory Path?</p>\n","answer":"<p>Mocked directory path is the location to the base directory where all your mocked response file will be stored. This parameter is defined in run-mock-server-console.js file. It is defined at the start of mock server as shown in the code below:</p>\n<pre><code class=\"language-javascript\">require('./endpoints');\nrequire('@walmart/shifu').start({\n  host: &quot;localhost&quot;,\n  mockedDirectory: &quot;./resources/mocked-data&quot;,\n  port: 8000,\n  project: 'HelloShifu',\n  metricsDB: 'http://kairos.prod.rapido.globalproducts.prod.walmart.com/api/v1/datapoints'\n});\n</code></pre>\n"},"152":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>Location For Response File For RespondWithFile?</p>\n","answer":"<p>If you have set your default folder to be <code>mocked-data</code>, then based on your URL path:</p>\n<p>For default variant, mock server will look for <code>./mocked-data/product/grouping/api/collection/GET/default.json</code>\nand for <code>mixItem</code> variant mock server will look for <code>./mocked-data/product/grouping/api/collection/GET/mixItem.json</code></p>\n"},"153":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>What Are Variants?</p>\n","answer":"<p>Variants allows to return a different data set for a given mocked route. Variants can be selected either in the admin UI or through automation APIs to determine what type of response a route should have. Routes are defined using the variant method on the Route object (returned by calling the route method). An object parameter is provided with the following attributes</p>\n<ul>\n<li>id: the variant id - used for the RESTful admin API and profile settings</li>\n<li>label: (optional) the variant label - used for display on the admin panel</li>\n<li>handler: (optional) the HAPI route handler which provides the route response</li>\n</ul>\n<p>Variants are useful because they allow you to test multiple scenarios that can happen with your route. Say, for example, you have a route exposing the ability to update a password. You might have several exceptional scenarios that you would want to test out (each could be a variant that you simply select to tell the route handler to use the appropriate response)</p>\n<ul>\n<li>the password was reset successfully</li>\n<li>the password didn't pass validation</li>\n<li>the old password wasn't entered correctly</li>\n<li>the username doesn't exist</li>\n<li>and so on...</li>\n</ul>\n"},"154":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Add A Variant To A Route?</p>\n","answer":"<p>To add a one or more variants do the following:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'Message',\n  path: '/get/message',\n  method: 'GET',\n  variantLabel: 'Hello',\n  handler: function (req, reply) {\n    reply('Hello');\n  }\n})\n \n.variant({\n    id: 'hello',\n    label: 'Hello World',\n    handler: function (req, reply) {\n      reply('Hello World');\n    }\n  })\n\n.variant({\n    id: 'hello',\n    label: 'Hello Universe',\n    handler: function (req, reply) {\n      reply('Hello Universe');\n    }\n  });  \n</code></pre>\n"},"155":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Switch Variants In Test Case?</p>\n","answer":"<pre><code>browser.setMockVariant({ fixture: &quot;fixture id&quot;, variant: &quot;variant id&quot; }); \n</code></pre>\n"},"156":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How To Switch Variants With HTTP Call?</p>\n","answer":"<p>You can also switch the variants via HTTP call (Recommended only when not using Shifu as a library). As an example, if you want to set variant to <code>helloUniverse</code> for the route below:</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n    id: 'helloWorld',\n    label: 'Hello World',\n    path: '/helloWorld',\n    method: 'GET',\n    handler: function (req, reply) {\n      reply('Hello World');\n    }\n  })\n  .variant({\n    id: 'helloUniverse',\n    label: 'Hello Universe',\n    handler: function (req, reply) {\n      reply('Hello Universe');\n    }\n  });\n</code></pre>\n<pre><code>curl  -H &quot;Content-type: application/json&quot; -X POST -d '{&quot;variant&quot;:&quot;&lt;variant&gt;&quot;}' &lt;host&gt;:&lt;port&gt;/shifu/api/route/&lt;routeId&gt;\n</code></pre>\n<p>So for the above route, you can switch the variant to <code>helloUniverse</code> like this:</p>\n<pre><code>curl  -H &quot;Content-type: application/json&quot; -X POST -d '{&quot;variant&quot;:&quot;helloUniverse&quot;}' http://localhost:8000/shifu/api/route/helloWorld\n</code></pre>\n<p>When using parallel sessions, if you want to switch a variant for a route for a particular session, register the session with mock server like this:</p>\n<pre><code>curl &lt;host&gt;:&lt;port&gt;/shifu/api/registerSession\n\n// e.g \ncurl http://localhost:8000/shifu/api/registerSession\n</code></pre>\n<p>If sessions are available, mock server will return a response like:</p>\n<pre><code> {&quot;session&quot;:&quot;33b08d&quot;}\n</code></pre>\n<p>Extract the session id from response and append it to the route id you want to switch variant for e.g:</p>\n<pre><code>curl -H &quot;Content-type: application/json&quot; -X POST -d &quot;variant&quot;:&quot;helloUniverse&quot;}' http://localhost:8000/shifu/api/route/helloWorld-33b08d\n</code></pre>\n"},"157":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>Can I reset all variants for all the routes?</p>\n","answer":"<p>Yes. Please refer <a href=\"/documentation/Mocking/rWeb/JAVASCRIPT/API%20Guide#reset-all-variants---resetallvariants\">resetAllVariants</a> in API guide section.</p>\n"},"158":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>What Is Mock Server UI Used For?</p>\n","answer":"<p>UI can be used to view and test mocked routes as well as for manual switching of variants when running tests manually.</p>\n"},"159":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>What Is Parallel Sessions?</p>\n","answer":"<p>Parallel sessions allows you to run multiple instance of server virtually while running only one server. This is helpful when you are running multiple test cases which access the same routes but different variants as parallel sessions allow you to set different variants on same routes without conflicting. This saves CPU and RAM both as only one server is running instead of multiple. Please see the call flow explaination without and with Parallel Sessions Below:</p>\n<h3>Call Flow Without Parallel Sessions</h3>\n<p>![without_parallel_sessions]</p>\n<h3>Call Flow With Parallel Sessions</h3>\n<p>![with_parallel_sessions]</p>\n"},"160":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How Can I Enable Parallel Sessions On Mock Server?</p>\n","answer":"<p>Add <code>sessions</code> parameter with number of virtual services you want as shown in below example while startung mock Server.</p>\n<pre><code class=\"language-javascript\">require('./endpoints');\nvar shifu = require('@walmart/shifu');\nshifu.start({\n  host: &quot;localhost&quot;,\n  mockedDirectory: &quot;./resources/mocked-data&quot;,\n  port: 8000,\n  sessions: 2,\n  project: 'HelloShifu',\n  metricsDB: 'http://kairos.prod.rapido.globalproducts.prod.walmart.com/api/v1/datapoints'\n});\n</code></pre>\n"},"161":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How Can I Register a Session For Parallel Sessions?</p>\n","answer":"<pre><code class=\"language-javascript\">var sessionId = shifu.registerSession();\n</code></pre>\n"},"162":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How Can I Close A Session For Parallel Sessions?</p>\n","answer":"<pre><code class=\"language-javascript\">var closeSession = shifu.closeSession(sessionId);\n</code></pre>\n"},"163":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>Does Mock Server Has Any Utility To Modify JSON Data Stored In Files?</p>\n","answer":"<p>Yes - Mock Server exposes <code>transpose</code> option that cna be passed in <code>respondWithFile</code> method to modify the JSON files dynamically.</p>\n"},"164":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How Does <code>transposeData</code> Work To Modify JSON Data Stored In Files?</p>\n","answer":"<p>If you have many variants for a Rest end point and the mocked data for all variants can use the same JSON response with few changes to the values, than this feature is what you need. This feature allows you to dynamically change a JSON file before sending the response back from the mock server for the request. It removes the need of having one to one mapping of static JSON files with each variants.</p>\n<pre><code class=\"language-javascript\">// Static Response JSON File\n{\n id: &quot;1234&quot;,\n name: &quot;toothpaste&quot;\n details: [\n   {\n    flavor: &quot;Mint 1&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n    },\n   {\n    flavor: &quot;Mint&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n   }\n ]\n}\n\n// Sample code for substituting id from 1234 to 7777 and flavor from Mint to Mint 2 for second array element in routes\nshifu.route({\n    id: 'Get Collection',\n    label: 'Get Collections',\n    path: '/product/grouping/api/collection/{collectionId}',\n \n    handler: function(req, reply) {\n      var dataToChange = {\n        'id': '7777',\n        'details[1].flavor': 'Mint 2'\n      }\n      shifu.util.respondWithFile(this, reply, {transpose: dataToChange}); \n    }\n});\n\n// Dynamic Response JSON File returned from Mock service\n{\n id: &quot;7777&quot;,\n name: &quot;toothpaste&quot;\n details: [\n   {\n    flavor: &quot;Mint 1&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n    },\n   {\n    flavor: &quot;Mint 2&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n   }\n ]\n}\n</code></pre>\n"},"165":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>Can I Use <code>transposeData</code> Functionality Outside Of <code>respondWithFile</code>?</p>\n","answer":"<p>Yes - You can use it by Shifu Utils.</p>\n<pre><code class=\"language-javascript\">var fileLocation = require(&quot;path&quot;).join(__dirname, './resources/test-data/data-transposition-test.json');\nvar dataSet = utils.readJsonFile(fileLocation);\nvar dataToChange = {\n 'items.item[0].id': 1234, // substitue id 0001 to 1234\n 'items.item[0].val': &quot;value&quot;, // Add 'val' to first array element of items.item\n 'items.item[1].id': 4567, // Add 'id' to second array element of items.item\n 'items.item[0].batters.batter[0].id': 5678 // substitue id 1001 to 5678\n}\nsubstitutedData = shifu.util.transposeData(dataSet, dataToChange);\n\n// Base JSON file - data-transposition-test.json\n{\n  &quot;items&quot;:\n  {\n    &quot;item&quot;:\n    [\n      {\n        &quot;id&quot;: &quot;0001&quot;,\n        &quot;type&quot;: &quot;donut&quot;,\n        &quot;name&quot;: &quot;Cake&quot;,\n        &quot;ppu&quot;: 0.55,\n        &quot;batters&quot;:\n        {\n          &quot;type&quot; : 1,\n          &quot;batter&quot;:\n          [\n            { &quot;id&quot;: &quot;1001&quot;, &quot;type&quot;: &quot;Regular&quot; },\n          ]\n        },\n        &quot;topping&quot;:\n        [\n          { &quot;id&quot;: &quot;5001&quot;, &quot;type&quot;: &quot;None&quot; }\n        ]\n      }\n    ]\n  }\n};\n\n// Resulted JSON\n{\n  &quot;items&quot;: {\n    &quot;item&quot;: [\n      {\n        &quot;id&quot;: 1234,\n        &quot;type&quot;: &quot;donut&quot;,\n        &quot;name&quot;: &quot;Cake&quot;,\n        &quot;ppu&quot;: 0.55,\n        &quot;val&quot;: &quot;value&quot;\n        &quot;batters&quot;: {\n          &quot;type&quot;: 1,\n          &quot;batter&quot;: [\n            {&quot;id&quot;: 5678, &quot;type&quot;: &quot;Regular&quot;}\n          ]\n        },\n        &quot;topping&quot;: [\n          {&quot;id&quot;: &quot;5001&quot;, &quot;type&quot;: &quot;None&quot;}\n        ]\n      },\n      {\n        &quot;id&quot;: 4567\n      }\n    ]\n  }\n};\n</code></pre>\n"},"166":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>Why Mock Server Returns Error 415 Unsupported Media Type?</p>\n","answer":"<p>If you're using content type like <code>application/graphql</code>, follow this example</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n    id: 'id',\n    label: 'id',\n    path: '/graphql',\n    method: ['POST', 'PUT'],\n    config : {\n      payload: {\n        parse: false,\n        allow: 'application/graphql'\n      }\n    },\n    handler: function (req, reply) {\n      shifu.util.respondWithFile(this, reply, {code: 200});\n    }\n  });\n</code></pre>\n<p>For more details, <a href=\"https://stackoverflow.com/questions/34640307/support-additional-mime-types-in-hapi\">read this</a></p>\n"},"167":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How to send meta information for response ?</p>\n","answer":"<p>Mocked responses can also have meta information that can be set in the response files itself. For example :</p>\n<pre><code>{\n  &quot;setHeaders&quot;: {\n    &quot;date&quot;: &quot;Fri, 06 Jan 2017 03:33:22 GMT&quot;,\n    &quot;content-type&quot;: &quot;text/html; charset=UTF-8&quot;,\n    &quot;transfer-encoding&quot;: &quot;chunked&quot;,\n    &quot;connection&quot;: &quot;close&quot;,\n    &quot;set-cookie&quot;: [\n      &quot;__cfduid=d7502270409ade5544a5a60d0fbd7652a1483673602; expires=Sat, 06-Jan-18 03:33:22 GMT; path=/; domain=.typicode.com; HttpOnly&quot;\n    ],\n    &quot;x-powered-by&quot;: &quot;Express&quot;,\n    &quot;vary&quot;: &quot;Accept-Encoding&quot;,\n    &quot;access-control-allow-credentials&quot;: &quot;true&quot;,\n    &quot;cache-control&quot;: &quot;public, max-age=14400&quot;,\n    &quot;last-modified&quot;: &quot;Thu, 05 Jan 2017 07:28:00 GMT&quot;,\n    &quot;via&quot;: &quot;1.1 vegur&quot;,\n    &quot;cf-cache-status&quot;: &quot;HIT&quot;,\n    &quot;expires&quot;: &quot;Fri, 06 Jan 2017 07:33:22 GMT&quot;,\n    &quot;server&quot;: &quot;cloudflare-nginx&quot;,\n    &quot;cf-ray&quot;: &quot;31cc1baee47b11fb-SJC&quot;\n  },\n  &quot;setCode&quot;:201,\n  &quot;setPayload&quot;: &quot;resources/mocked-data/message/GET/file_read_from_recorded_file.txt&quot;,\n  &quot;setContentType&quot;: &quot;text/plain; charset=utf-8&quot;\n}\n</code></pre>\n<p>The above file is going to set the headers of the response from Shifu according to <code>headers</code> provided in <code>setHeaders</code>, <code>code</code> provided in <code>setCode</code> , <code>contentType</code> provided in <code>setContentType</code> and <code>payload</code> provided in <code>setPayload</code>. If <code>setPayload</code> is a path of the file intended to be responded with, then Shifu will look for the file and respond with the content of that file. If <code>setPayload</code> is JSON content, then Shifu will respond with JSON content.</p>\n<p>The above functionality makes sure that Shifu is able to handle all the file types when responding with recorded mocked data.</p>\n<p>In order to test different scenarios, you can add/delete/update header information in the <code>setHeaders</code> value. Or if you need to change the <code>contentType</code> of the response, you can simply replace value of <code>setContentType</code>.</p>\n<p>Please note that <code>setContentType</code> will take precedence over <code>content-type</code> header value. If <code>setContentType</code> is not provided then, HTTP will set the contentType of the file according to file type.</p>\n"},"168":{"level1":"Mocking","level2":"Services","level3":"JAVASCRIPT","question":"<p>How to add Shifu custom commands to Nightwatch?</p>\n","answer":"<p>To add mock server custom commands to control the Shifu server in your end to end tests, add the following in <code>nightwatch.json</code>:</p>\n<pre><code>&quot;custom_commands_path&quot;: [\n    ...\n    &quot;./node_modules/shifu-magellan-nightwatch/commands&quot;\n  ],\n</code></pre>\n"},"169":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>What Can Be Mocked?</p>\n","answer":"<p>Any Restful service API can be mocked such as:</p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>OPTIONS</li>\n<li>and so on..</li>\n</ul>\n"},"170":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Can AJAX Calls Be Mocked?</p>\n","answer":"<p>Yes - It is same as for any other backend service. For AJAX call, point it to the mocked server instance instead of\nthe actual back end service and add a mocked route in the file containing mocked routes for mock server.</p>\n"},"171":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>What Are The Pre-Requisites?</p>\n","answer":"<ul>\n<li>node.js 4+ (npm is included in the package)</li>\n<li>If inside of Walmart you need npm access to the internal <a href=\"https://confluence.walmart.com/display/PGPTOOLS/NPM+and+Nexus\">nexus/npm repo</a></li>\n</ul>\n"},"172":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How Can I Add Mock Server Dependency To My Node Project?</p>\n","answer":"<pre><code class=\"language-javascript\">&quot;dependencies&quot;: {\n  &quot;@walmart/shifu&quot;: &quot;3.0.4&quot; // add the latest version\n}\n</code></pre>\n"},"173":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Add A Mocked Route?</p>\n","answer":"<p>Add the following code in your routes file, typically <code>endpoints.js</code></p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'helloWorld',                 // required\n  label: 'Hello World',             // Used for Mock Server UI\n  path: '/helloWorld',              // the path you want to mock\n  method: 'GET',                    // The Rest Method you want to mock for this API\n  handler: function (req, reply) {  // Add Logic to massage data before returning back to the request.\n    reply('Hello World');\n  }\n});\n</code></pre>\n"},"174":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Why do I see <code>No routes defined for this path</code> ?</p>\n","answer":"<p>Any undefined routes in Shifu will be responsed with a user friendly message <code>No routes defined for this path</code>.</p>\n"},"175":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Create Dynamic URLs?</p>\n","answer":"<p>By adding the URL part in curly brackets that you would liek to by dynamic such as <code>/get/customerInfo/{customerid}/{zipcode}</code></p>\n<p>For example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'customerInfo',\n  label: 'Customer Info',\n  path: '/get/customerInfo/{customerid}/{zipcode}', // both customerid and zipcode will be dynamic\n  method: 'GET',\n  variantLabel: 'Get Customer Info',\n  handler: function (req, reply) {\n    reply('How to read the customer id :(');\n  }\n});\n</code></pre>\n"},"176":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Read Dynamic URLs In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/get/customerInfo/{customerid}/{zipcode}'\n  handler: function(request, reply) { \n    var params = request.params;\n    var customerid = params.customerid; // customerid is 123 if request is &quot;/get/customerInfo/123/92127&quot;\n    var zipcode = params.zipcode;       // zipcode is 92127 if request is &quot;/get/customerInfo/123/92127&quot;\n  }\n}); \n</code></pre>\n"},"177":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Read Header Parameters In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var headers = request.raw.req.headers;\n    var authorization = headers.authorization;\n    if(authorization) {\n       // do something\n    }\n    reply().code(204);\n  }\n}); \n</code></pre>\n"},"178":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Read Payload In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var payload = request.payload;\n    // foo would be &quot;bar&quot; if the posted body content (as JSON) is {&quot;foo&quot;: &quot;bar&quot;}\n    var foo = payload.foo;\n  }\n}); \n</code></pre>\n"},"179":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Read Query Parameters In Request?</p>\n","answer":"<pre><code class=\"language-javascript\">var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/getCart'\n  handler: function(request, reply) {\n    var queryParams = request.query;\n    // foo would be &quot;bar&quot; if incoming request is &quot;/api/getCart?foo=bar&quot;\n    var foo = queryParams.foo;\n  }\n}); \n</code></pre>\n"},"180":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How to read url parameters in request ?</p>\n","answer":"<p>To read the dynamic URL parameters in request with in the route, use <code>request.params</code></p>\n<pre><code>var shifu = require('@walmart/shifu');\nshifu.route({\n  path: '/api/customer/{id}'\n  handler: function(req, reply) {\n    // would be &quot;123&quot; if the endpiont hit was &quot;/api/customer/123&quot;\n    var id = request.params.id;\n  }\n});\n</code></pre>\n"},"181":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How to add delay to response?</p>\n","answer":"<p>A mocked response can also be delayed by some time specified by the user. You can simulate a delay (in ms) by passing delay as follows :</p>\n<pre><code>shifu.route({\n  id: 'message',\n  label: 'Hello Variants',\n  path: '/message',\n\n  variantLabel: 'hello world',\n  handler: function (req, reply) {\n    shifu.util.respondWithFile(this, reply, {code: 202});\n  }\n})\n.variant({\n    id: 'variant with delay',\n    label: 'variant with delay',\n    handler: function (req, reply) {\n      shifu.util.respondWithFile(this, reply, {filePath: './message/GET/variant_with_delay.json', delay: 1000});\n    }\n  });\n</code></pre>\n"},"182":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Set Custom Headers In Mocked Response?</p>\n","answer":"<h3>Preferred Way</h3>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'header',\n  label: 'Test Headers',\n  path: '/api/testHeaders',\n  handler: function (req, reply) {\n    var myHeaders = {\n      header1: 'test1',\n      header2: 'test2',\n      header3: true\n    };\n    shifu.util.respondWithFile(this, reply, {headers: myHeaders});\n  }\n});\n</code></pre>\n<h3>Alternate Way</h3>\n<p>To set custom headers, call <code>header(name, value, options)</code> on reply object, where</p>\n<p><code>name</code> is the header name\n<code>value</code> is the header value\n<code>options</code> is an optional object with the following attributes</p>\n<table>\n<thead>\n<tr><th>Attribute</th><th style=\"text-align:center\">Description</th></tr>\n</thead>\n<tbody>\n<tr><td>append</td><td style=\"text-align:center\">if <code>true</code>, the value is appended to any existing header value using separator. Defaults to <code>false</code>.</td></tr>\n<tr><td>separator</td><td style=\"text-align:center\">string used as separator when appending to an exiting value. Defaults to <code>','</code></td></tr>\n<tr><td>override</td><td style=\"text-align:center\">if <code>false</code>, the header value is not set if an existing value present. Defaults to <code>true</code></td></tr>\n<tr><td>duplicate</td><td style=\"text-align:center\">if <code>false</code>, the header value is not modified if the provided value is already included. Does not apply when append is false or if the name is 'set-cookie'. Defaults to <code>true</code></td></tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'Get Collection',\n  label: 'Get Collections',\n  path: '/product/grouping/api/collection/{collectionId}',\n  handler: function(req, reply) {\n  reply({message: 'test'})\n    .header('X-Res-Header', 'I\\'m a custom response header')\n  }\n});\n</code></pre>\n"},"183":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Set Custom Cookies In Mocked Response?</p>\n","answer":"<h3>Preferred Way</h3>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'cookie',\n  label: 'Test Cookies',\n  path: '/api/testCookies',\n  handler: function (req, reply) {\n    var cookies = [\n      {name: 'com.wm.customer', value: 'vz7.0b5c56'},\n      {name: 'CID', value: 'SmockedCID', options: {domain: 'domain', path: '/'}},\n      {name: 'anotherCookie', value: 'cookieValue'}\n    ];\n    \n    shifu.util.respondWithFile(this, reply, {cookies: cookies});\n  }\n});\n</code></pre>\n<h3>Alternate Way</h3>\n<p>To set custom cookies, call <code>state(name, value, options)</code> on reply object, where\n<code>name</code> is the cookie name\n<code>value</code> is the cookie value\n<code>options</code> is the server state options settings found <a href=\"https://hapijs.com/api#serverstatename-options\">here</a></p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'Get Collection',\n  label: 'Get Collections',\n  path: '/product/grouping/api/collection/{collectionId}',\n  handler: function(req, reply) {\n      reply({message: 'test'})\n       .state('test-cookie', 'I\\'m a custom response cookie')\n  }\n});  \n</code></pre>\n"},"184":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Set CORS Headers?</p>\n","answer":"<p>The <a href=\"https://www.w3.org/TR/cors/\">Cross-Origin Resource Sharing</a> protocol allows browsers to make cross-origin API calls. CORS is required by web application running inside a browser which are loaded from a different domain than the API server. CORS headers are disabled by default. To enable, set <code>cors</code> to true, or to an object with the following options:</p>\n<table>\n<thead>\n<tr><th>Option</th><th style=\"text-align:center\">Description</th></tr>\n</thead>\n<tbody>\n<tr><td>origin</td><td style=\"text-align:center\">a string array of allowed origin servers <code>Access-Control-Allow-Origin</code>. Defaults to any origin ['*']</td></tr>\n<tr><td>maxAge</td><td style=\"text-align:center\">number of seconds the browser should cache the CORS response ('Access-Control-Max-Age'). The greater the value, the longer it will take before the browser checks for changes in policy. Defaults to 86400 (one day).</td></tr>\n<tr><td>headers</td><td style=\"text-align:center\">string array of allowed headers <code>Access-Control-Allow-Headers</code>. Defaults to <code>['Authorization', 'Content-Type', 'If-None-Match']</code>.</td></tr>\n<tr><td>additionalHeaders</td><td style=\"text-align:center\">string array of additional headers to headers. Use this to keep the default headers in place.</td></tr>\n<tr><td>methods</td><td style=\"text-align:center\">string array of allowed HTTP methods Access-Control-Allow-Methods. Defaults to <code>['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'OPTIONS']</code></td></tr>\n<tr><td>additionalMethods</td><td style=\"text-align:center\">string array of additional methods to methods. Use this to keep the default methods in place</td></tr>\n<tr><td>exposedHeaders</td><td style=\"text-align:center\">string array of exposed headers Access-Control-Expose-Headers. Defaults to <code>['WWW-Authenticate', 'Server-Authorization'</code></td></tr>\n<tr><td>additionalExposedHeaders</td><td style=\"text-align:center\">a string array of additional headers to exposedHeaders. Use this to keep the default headers in place.</td></tr>\n<tr><td>credentials</td><td style=\"text-align:center\">if true, allows user credentials to be sent Access-Control-Allow-Credentials. Defaults to false.</td></tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">var corsHeaders = {\n  origin: ['*'],\n  headers: [&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept&quot;],\n  credentials: true,\n}\n\n// Items\nshifu.route({\n  id: 'tempo',\n  label: 'Tempo',\n  path: '/tempo1',\n    \n  config: {\n    cors: corsHeaders\n  },\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n});\n</code></pre>\n"},"185":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>What Is <code>respondWithFile</code> Utility?</p>\n","answer":"<p>This feature allows you to respond with a data stored in a file instead of hard coding the response data in the routes definition. This way user does not have to hard-code/change the response in handler and rather can just swap the file with different data without even bringing the server down.</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n      id: 'ResponseFromFile',\n      label: 'Response From File',\n      path: '/get/fromFile',\n      handler: function(req, reply) {\n        shifu.util.respondWithFile(this, reply);\n      }\n  });\n</code></pre>\n<p>In the above example, mock server will automatically look for a file <code>default.{some_extension}</code>  at <code>./mocked-data/get/fromFile/GET/default.{some_extension}</code></p>\n"},"186":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How File Path Is Calculated For <code>respondWithFile</code> Utility?</p>\n","answer":"<p>The path to the mocked data file is auto-calculated based on the route path. For example if the route path is /get/cart than for the default variant, mock server will look for the <code>default.{some_extension}</code> file at <code>./mocked-data/get/fromFile/GET/default.{some_extension}</code>. For variants, the name of the file should be changed from default to the variant name as shown below:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'ResponseFromFile',\n  label: 'Response From File',\n  path: '/get/fromFile',\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n})\n.variant({\n  id: 'textData',\n  label: 'Text Data',\n  handler: function (req, reply) {\n    shifu.util.respondWithFile(this, reply);\n  }\n});\n</code></pre>\n<p>In above example mock server will look for <code>./resources/mocked-data/get/fromFile/GET/textData.{some_extension} file for the variant textData</code></p>\n"},"187":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Can I Provide A Custom File Location <code>respondWithFile</code> Utility?</p>\n","answer":"<p>Yes. By adding <code>filePath</code> parameter as shown in below example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'CustomResponseFile',\n  label: 'Response From Custom Path',\n  path: '/get/customFile',\n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply, {filePath: './custom.json'});\n  }\n});\n</code></pre>\n<p>In above example mock server will look for the file under MockedDirectory only but at <code>./mocked-data/custom.json</code></p>\n"},"188":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Respond Only With Code?</p>\n","answer":"<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'hello message',\n  path: '/message',\n  handler: function(req, reply) {\n    reply().code(400);\n  }\n});\n</code></pre>\n"},"189":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Can I Return A Response Code With <code>respondWithFile</code> Utility?</p>\n","answer":"<p>Yes - by adding <code>code</code> parameter as shown in below example:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'hello message',\n  path: '/message',\n \n  handler: function(req, reply) {\n    shifu.util.respondWithFile(this, reply, {code: 400});\n  }\n});\n</code></pre>\n"},"190":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>What Is MockedDirectory Path?</p>\n","answer":"<p>Mocked directory path is the location to the base directory where all your mocked response file will be stored. This parameter is defined in run-mock-server-console.js file. It is defined at the start of mock server as shown in the code below:</p>\n<pre><code class=\"language-javascript\">require('./endpoints');\nrequire('@walmart/shifu').start({\n  host: &quot;localhost&quot;,\n  mockedDirectory: &quot;./resources/mocked-data&quot;,\n  port: 8000,\n  project: 'HelloShifu',\n  metricsDB: 'http://kairos.prod.rapido.globalproducts.prod.walmart.com/api/v1/datapoints'\n});\n</code></pre>\n"},"191":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Location For Response File For RespondWithFile?</p>\n","answer":"<p>If you have set your default folder to be <code>mocked-data</code>, then based on your URL path:</p>\n<p>For default variant, mock server will look for <code>./mocked-data/product/grouping/api/collection/GET/default.json</code>\nand for <code>mixItem</code> variant mock server will look for <code>./mocked-data/product/grouping/api/collection/GET/mixItem.json</code></p>\n"},"192":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>What Are Variants?</p>\n","answer":"<p>Variants allows to return a different data set for a given mocked route. Variants can be selected either in the admin UI or through automation APIs to determine what type of response a route should have. Routes are defined using the variant method on the Route object (returned by calling the route method). An object parameter is provided with the following attributes</p>\n<ul>\n<li>id: the variant id - used for the RESTful admin API and profile settings</li>\n<li>label: (optional) the variant label - used for display on the admin panel</li>\n<li>handler: (optional) the HAPI route handler which provides the route response</li>\n</ul>\n<p>Variants are useful because they allow you to test multiple scenarios that can happen with your route. Say, for example, you have a route exposing the ability to update a password. You might have several exceptional scenarios that you would want to test out (each could be a variant that you simply select to tell the route handler to use the appropriate response)</p>\n<ul>\n<li>the password was reset successfully</li>\n<li>the password didn't pass validation</li>\n<li>the old password wasn't entered correctly</li>\n<li>the username doesn't exist</li>\n<li>and so on...</li>\n</ul>\n"},"193":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Add A Variant To A Route?</p>\n","answer":"<p>To add a one or more variants do the following:</p>\n<pre><code class=\"language-javascript\">shifu.route({\n  id: 'message',\n  label: 'Message',\n  path: '/get/message',\n  method: 'GET',\n  variantLabel: 'Hello',\n  handler: function (req, reply) {\n    reply('Hello');\n  }\n})\n \n.variant({\n    id: 'hello',\n    label: 'Hello World',\n    handler: function (req, reply) {\n      reply('Hello World');\n    }\n  })\n\n.variant({\n    id: 'hello',\n    label: 'Hello Universe',\n    handler: function (req, reply) {\n      reply('Hello Universe');\n    }\n  });  \n</code></pre>\n"},"194":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Switch Variants In Test Case?</p>\n","answer":"<pre><code>browser.setMockVariant({ fixture: &quot;fixture id&quot;, variant: &quot;variant id&quot; }); \n</code></pre>\n"},"195":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How To Switch Variants With HTTP Call?</p>\n","answer":"<p>You can also switch the variants via HTTP call (Recommended only when not using Shifu as a library). As an example, if you want to set variant to <code>helloUniverse</code> for the route below:</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n    id: 'helloWorld',\n    label: 'Hello World',\n    path: '/helloWorld',\n    method: 'GET',\n    handler: function (req, reply) {\n      reply('Hello World');\n    }\n  })\n  .variant({\n    id: 'helloUniverse',\n    label: 'Hello Universe',\n    handler: function (req, reply) {\n      reply('Hello Universe');\n    }\n  });\n</code></pre>\n<pre><code>curl  -H &quot;Content-type: application/json&quot; -X POST -d '{&quot;variant&quot;:&quot;&lt;variant&gt;&quot;}' &lt;host&gt;:&lt;port&gt;/shifu/api/route/&lt;routeId&gt;\n</code></pre>\n<p>So for the above route, you can switch the variant to <code>helloUniverse</code> like this:</p>\n<pre><code>curl  -H &quot;Content-type: application/json&quot; -X POST -d '{&quot;variant&quot;:&quot;helloUniverse&quot;}' http://localhost:8000/shifu/api/route/helloWorld\n</code></pre>\n<p>When using parallel sessions, if you want to switch a variant for a route for a particular session, register the session with mock server like this:</p>\n<pre><code>curl &lt;host&gt;:&lt;port&gt;/shifu/api/registerSession\n\n// e.g \ncurl http://localhost:8000/shifu/api/registerSession\n</code></pre>\n<p>If sessions are available, mock server will return a response like:</p>\n<pre><code> {&quot;session&quot;:&quot;33b08d&quot;}\n</code></pre>\n<p>Extract the session id from response and append it to the route id you want to switch variant for e.g:</p>\n<pre><code>curl -H &quot;Content-type: application/json&quot; -X POST -d &quot;variant&quot;:&quot;helloUniverse&quot;}' http://localhost:8000/shifu/api/route/helloWorld-33b08d\n</code></pre>\n"},"196":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Can I reset all variants for all the routes?</p>\n","answer":"<p>Yes. Please refer <a href=\"/documentation/Mocking/rWeb/JAVASCRIPT/API%20Guide#reset-all-variants---resetallvariants\">resetAllVariants</a> in API guide section.</p>\n"},"197":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>What Is Mock Server UI Used For?</p>\n","answer":"<p>UI can be used to view and test mocked routes as well as for manual switching of variants when running tests manually.</p>\n"},"198":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>What Is Parallel Sessions?</p>\n","answer":"<p>Parallel sessions allows you to run multiple instance of server virtually while running only one server. This is helpful when you are running multiple test cases which access the same routes but different variants as parallel sessions allow you to set different variants on same routes without conflicting. This saves CPU and RAM both as only one server is running instead of multiple. Please see the call flow explaination without and with Parallel Sessions Below:</p>\n<h3>Call Flow Without Parallel Sessions</h3>\n<p>![without_parallel_sessions]</p>\n<h3>Call Flow With Parallel Sessions</h3>\n<p>![with_parallel_sessions]</p>\n"},"199":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How Can I Enable Parallel Sessions On Mock Server?</p>\n","answer":"<p>Add <code>sessions</code> parameter with number of virtual services you want as shown in below example while startung mock Server.</p>\n<pre><code class=\"language-javascript\">require('./endpoints');\nvar shifu = require('@walmart/shifu');\nshifu.start({\n  host: &quot;localhost&quot;,\n  mockedDirectory: &quot;./resources/mocked-data&quot;,\n  port: 8000,\n  sessions: 2,\n  project: 'HelloShifu',\n  metricsDB: 'http://kairos.prod.rapido.globalproducts.prod.walmart.com/api/v1/datapoints'\n});\n</code></pre>\n"},"200":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How Can I Register a Session For Parallel Sessions?</p>\n","answer":"<pre><code class=\"language-javascript\">var sessionId = shifu.registerSession();\n</code></pre>\n"},"201":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How Can I Close A Session For Parallel Sessions?</p>\n","answer":"<pre><code class=\"language-javascript\">var closeSession = shifu.closeSession(sessionId);\n</code></pre>\n"},"202":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Does Mock Server Has Any Utility To Modify JSON Data Stored In Files?</p>\n","answer":"<p>Yes - Mock Server exposes <code>transpose</code> option that cna be passed in <code>respondWithFile</code> method to modify the JSON files dynamically.</p>\n"},"203":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How Does <code>transposeData</code> Work To Modify JSON Data Stored In Files?</p>\n","answer":"<p>If you have many variants for a Rest end point and the mocked data for all variants can use the same JSON response with few changes to the values, than this feature is what you need. This feature allows you to dynamically change a JSON file before sending the response back from the mock server for the request. It removes the need of having one to one mapping of static JSON files with each variants.</p>\n<pre><code class=\"language-javascript\">// Static Response JSON File\n{\n id: &quot;1234&quot;,\n name: &quot;toothpaste&quot;\n details: [\n   {\n    flavor: &quot;Mint 1&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n    },\n   {\n    flavor: &quot;Mint&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n   }\n ]\n}\n\n// Sample code for substituting id from 1234 to 7777 and flavor from Mint to Mint 2 for second array element in routes\nshifu.route({\n    id: 'Get Collection',\n    label: 'Get Collections',\n    path: '/product/grouping/api/collection/{collectionId}',\n \n    handler: function(req, reply) {\n      var dataToChange = {\n        'id': '7777',\n        'details[1].flavor': 'Mint 2'\n      }\n      shifu.util.respondWithFile(this, reply, {transpose: dataToChange}); \n    }\n});\n\n// Dynamic Response JSON File returned from Mock service\n{\n id: &quot;7777&quot;,\n name: &quot;toothpaste&quot;\n details: [\n   {\n    flavor: &quot;Mint 1&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n    },\n   {\n    flavor: &quot;Mint 2&quot;,\n    Size: &quot;10&quot;,\n    Size_Type: ounce\n   }\n ]\n}\n</code></pre>\n"},"204":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Can I Use <code>transposeData</code> Functionality Outside Of <code>respondWithFile</code>?</p>\n","answer":"<p>Yes - You can use it by Shifu Utils.</p>\n<pre><code class=\"language-javascript\">var fileLocation = require(&quot;path&quot;).join(__dirname, './resources/test-data/data-transposition-test.json');\nvar dataSet = utils.readJsonFile(fileLocation);\nvar dataToChange = {\n 'items.item[0].id': 1234, // substitue id 0001 to 1234\n 'items.item[0].val': &quot;value&quot;, // Add 'val' to first array element of items.item\n 'items.item[1].id': 4567, // Add 'id' to second array element of items.item\n 'items.item[0].batters.batter[0].id': 5678 // substitue id 1001 to 5678\n}\nsubstitutedData = shifu.util.transposeData(dataSet, dataToChange);\n\n// Base JSON file - data-transposition-test.json\n{\n  &quot;items&quot;:\n  {\n    &quot;item&quot;:\n    [\n      {\n        &quot;id&quot;: &quot;0001&quot;,\n        &quot;type&quot;: &quot;donut&quot;,\n        &quot;name&quot;: &quot;Cake&quot;,\n        &quot;ppu&quot;: 0.55,\n        &quot;batters&quot;:\n        {\n          &quot;type&quot; : 1,\n          &quot;batter&quot;:\n          [\n            { &quot;id&quot;: &quot;1001&quot;, &quot;type&quot;: &quot;Regular&quot; },\n          ]\n        },\n        &quot;topping&quot;:\n        [\n          { &quot;id&quot;: &quot;5001&quot;, &quot;type&quot;: &quot;None&quot; }\n        ]\n      }\n    ]\n  }\n};\n\n// Resulted JSON\n{\n  &quot;items&quot;: {\n    &quot;item&quot;: [\n      {\n        &quot;id&quot;: 1234,\n        &quot;type&quot;: &quot;donut&quot;,\n        &quot;name&quot;: &quot;Cake&quot;,\n        &quot;ppu&quot;: 0.55,\n        &quot;val&quot;: &quot;value&quot;\n        &quot;batters&quot;: {\n          &quot;type&quot;: 1,\n          &quot;batter&quot;: [\n            {&quot;id&quot;: 5678, &quot;type&quot;: &quot;Regular&quot;}\n          ]\n        },\n        &quot;topping&quot;: [\n          {&quot;id&quot;: &quot;5001&quot;, &quot;type&quot;: &quot;None&quot;}\n        ]\n      },\n      {\n        &quot;id&quot;: 4567\n      }\n    ]\n  }\n};\n</code></pre>\n"},"205":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>Why Mock Server Returns Error 415 Unsupported Media Type?</p>\n","answer":"<p>If you're using content type like <code>application/graphql</code>, follow this example</p>\n<pre><code class=\"language-javascript\">  shifu.route({\n    id: 'id',\n    label: 'id',\n    path: '/graphql',\n    method: ['POST', 'PUT'],\n    config : {\n      payload: {\n        parse: false,\n        allow: 'application/graphql'\n      }\n    },\n    handler: function (req, reply) {\n      shifu.util.respondWithFile(this, reply, {code: 200});\n    }\n  });\n</code></pre>\n<p>For more details, <a href=\"https://stackoverflow.com/questions/34640307/support-additional-mime-types-in-hapi\">read this</a></p>\n"},"206":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How to send meta information for response ?</p>\n","answer":"<p>Mocked responses can also have meta information that can be set in the response files itself. For example :</p>\n<pre><code>{\n  &quot;setHeaders&quot;: {\n    &quot;date&quot;: &quot;Fri, 06 Jan 2017 03:33:22 GMT&quot;,\n    &quot;content-type&quot;: &quot;text/html; charset=UTF-8&quot;,\n    &quot;transfer-encoding&quot;: &quot;chunked&quot;,\n    &quot;connection&quot;: &quot;close&quot;,\n    &quot;set-cookie&quot;: [\n      &quot;__cfduid=d7502270409ade5544a5a60d0fbd7652a1483673602; expires=Sat, 06-Jan-18 03:33:22 GMT; path=/; domain=.typicode.com; HttpOnly&quot;\n    ],\n    &quot;x-powered-by&quot;: &quot;Express&quot;,\n    &quot;vary&quot;: &quot;Accept-Encoding&quot;,\n    &quot;access-control-allow-credentials&quot;: &quot;true&quot;,\n    &quot;cache-control&quot;: &quot;public, max-age=14400&quot;,\n    &quot;last-modified&quot;: &quot;Thu, 05 Jan 2017 07:28:00 GMT&quot;,\n    &quot;via&quot;: &quot;1.1 vegur&quot;,\n    &quot;cf-cache-status&quot;: &quot;HIT&quot;,\n    &quot;expires&quot;: &quot;Fri, 06 Jan 2017 07:33:22 GMT&quot;,\n    &quot;server&quot;: &quot;cloudflare-nginx&quot;,\n    &quot;cf-ray&quot;: &quot;31cc1baee47b11fb-SJC&quot;\n  },\n  &quot;setCode&quot;:201,\n  &quot;setPayload&quot;: &quot;resources/mocked-data/message/GET/file_read_from_recorded_file.txt&quot;,\n  &quot;setContentType&quot;: &quot;text/plain; charset=utf-8&quot;\n}\n</code></pre>\n<p>The above file is going to set the headers of the response from Shifu according to <code>headers</code> provided in <code>setHeaders</code>, <code>code</code> provided in <code>setCode</code> , <code>contentType</code> provided in <code>setContentType</code> and <code>payload</code> provided in <code>setPayload</code>. If <code>setPayload</code> is a path of the file intended to be responded with, then Shifu will look for the file and respond with the content of that file. If <code>setPayload</code> is JSON content, then Shifu will respond with JSON content.</p>\n<p>The above functionality makes sure that Shifu is able to handle all the file types when responding with recorded mocked data.</p>\n<p>In order to test different scenarios, you can add/delete/update header information in the <code>setHeaders</code> value. Or if you need to change the <code>contentType</code> of the response, you can simply replace value of <code>setContentType</code>.</p>\n<p>Please note that <code>setContentType</code> will take precedence over <code>content-type</code> header value. If <code>setContentType</code> is not provided then, HTTP will set the contentType of the file according to file type.</p>\n"},"207":{"level1":"Mocking","level2":"rWeb","level3":"JAVASCRIPT","question":"<p>How to add Shifu custom commands to Nightwatch?</p>\n","answer":"<p>To add mock server custom commands to control the Shifu server in your end to end tests, add the following in <code>nightwatch.json</code>:</p>\n<pre><code>&quot;custom_commands_path&quot;: [\n    ...\n    &quot;./node_modules/shifu-magellan-nightwatch/commands&quot;\n  ],\n</code></pre>\n"},"208":{"level1":"Performance Testing","level2":"rWeb","level3":"DECLARATIVE","question":"<p>What advantages does Rapido provide over other online performance tools?</p>\n","answer":"<pre><code>_Answer:_ \n\nHere are few advantages : \n- Rapido provides performanc testing as a part of Contionous Delivery, that is, it integrates with your repo and runs performance tests as part of PR Verify, Master Verify or scheduled build.\n- Rapido gives you an ability to catch the performance regressions of your app right at the gate, which gives you an opportunity to fix any performance bugs where it can be fixed easily.\n- Rapido provides an infrastructure to run web and mweb performance tests in Walmart's environment. The set up is done in Walmart's oneops environment which enables easy integration and on-boarding of any new projects. \n- Provides data transformation tools and and visualization which comes with the package when you on-board on Rapido.  \n- Easy set up, onboarding takes around 2 hours.\n- Rapido runs the tests in laboratory conditions, meaning, they run on VMs which are monitored for resources (CPU, memory, and network resources). We make sure that the VMs are isolated and are not affected by any noise that affect the tests. \n</code></pre>\n"},"209":{"level1":"Performance Testing","level2":"rWeb","level3":"DECLARATIVE","question":"<p>How long does it take to onboard on Rapido?</p>\n","answer":"<pre><code>- Around 2-3 hours if you are an electrode project.\n</code></pre>\n"},"210":{"level1":"Performance Testing","level2":"rWeb","level3":"DECLARATIVE","question":"<p>Can I run Rapido in my local environment?</p>\n","answer":"<pre><code>- Yes, Rapido can be executed on your local by simply following the above instructions.  You can also use\n</code></pre>\n<p>https://gecgithub01.walmart.com/rapido/rapido_local to run rapido locally. This repo has interactive features available which sets up rapido on its own to get a head start.</p>\n"},"211":{"level1":"Performance Testing","level2":"rWeb","level3":"DECLARATIVE","question":"<p>Are the performance tests reliable?</p>\n","answer":"<pre><code>- Performance tests are results recieved from the browser API itself. There could be few variances in some of the metrics delivered by sitespeed.io, but mostly the results are reliable when you run the tests with a mock server serving your application. We have seen large variances when a live backend is used for testing and that is because of obvious reasons.  That being said, we understand that performance, for many teams, would mean running tests on whole application with backened services involved. We provide following recommendations when it comes to running web performance tests :\n\n  - PR Verify for front end code  - Run with mock server\n  - Master Verify for front end code - Run with mock server\n  - Prod Verify for front end code - Run without mock server.\n</code></pre>\n<p>Please note that the Prod verify tests will have more flakiness in metrics becasue they will be affected by various factors, for example, network delays, geographical location, network speed and availability of third party content. The production tests can give you an idea of how your application is performing in the production and you can look for big fluctuations on the metrics to give you an idea if anything bad is happening with your application.</p>\n"},"212":{"level1":"Performance Testing","level2":"rWeb","level3":"DECLARATIVE","question":"<p>How is Rapido results different from Real User Metrics (RUM) results?</p>\n","answer":"<pre><code>- RUM metrics are measurements which are captured by beacon data when real users browse and perform click actions on the production website. Rapido metrics are measurements produced by synthetic performance testing, in which we create an environment for testing and run the application performance test in tighly monitored environment.  While RUM data is very useful for measuring the performance of your website in real world, it is a completely different measurements from the metrics produced in synthetic testing.  The reasons are obvious, testing in real world brings a lot of factors into play. Some of them are : network availability, geographic location, device resources etc.  In case of synthetic testing, the motive of testing is itself very different. The motivation here is to test performance of the app before it goes out in the real world. This  provides us an opportunity to fix the performance regressions before they are used by real users.\n</code></pre>\n"}};

  // Clear output
  $('.faq-output').html('');

  for (faq in faqs) {

    if (faqs[faq].level1 === category && faqs[faq].level2 === platform && faqs[faq].level3 === language) {
      appendOutput(faqs[faq]);
    }

    if (platform && !language) {

      if (faqs[faq].level1 === category && faqs[faq].level2 === platform) {
        appendOutput(faqs[faq]);
      }

    } else if (!platform && !language) {

      if (faqs[faq].level1 === category) {
        appendOutput(faqs[faq]);
      }

    }

  }

  // enable accordion toggling after output is updated
  enableAccordion();

  // Show back to top button if content size exceeds browser window size
  $('.back-to-top__img').css('display', ($('.container').height() > $(window).height()) ? 'block' : 'none');

  // Enable syntax-highlighting
  Prism.highlightAll();

}


function appendOutput(faq) {
  $('.faq-output').append('<h4 class="accordion-toggle">' + faq.question + '</h4>');
  $('.faq-output').append('<div class="accordion-content">' + faq.answer + '</div>');
  $('.faq-output').append('<hr class="faq-output__hr" />');
}


function populatePlatforms(category) {

  // Enable or disable platforms and languages dropdown
  $('#platform').prop('disabled', category === 'select');
  $('#language').prop('disabled', true);

  for (platform in faqsNav[category]) {

    $('#platform').append('<option value="' + platform + '">' + platform + '</option>');

    // If 1 platform present then autofill
    if (Object.keys(faqsNav[category]).length === 1) {
      $('#platform').val(platform);

      populateLanguages(category, platform);

    }

  }

}


function populateLanguages(category, platform) {

  // Enable or disable languages dropdown
  $('#language').prop('disabled', platform === 'select');

  for (language in faqsNav[category][platform]) {

    $('#language').append('<option value="' + language + '">' + language + '</option>');

    // If 1 language present then auto fill
    if (Object.keys(faqsNav[category][platform]).length === 1) {
      $('#language').val(language);
    }
  }

}


// Accordion script

function enableAccordion() {

  $('#accordion').find('.accordion-toggle').click(function () {

    //Expand or collapse this panel
    $(this).next().slideToggle('fast');

    // Toggle plus/minus icon on this panel
    if ($(this).css('background-image').indexOf('plus') !== -1) {
      addMinusHoverIcon(this);
      $(this)
        .mouseover(function () { addMinusHoverIcon(this); })
        .mouseout(function () { addMinusIcon(this); });
    } else {
      addPlusHoverIcon(this);
      $(this)
        .mouseover(function () { addPlusHoverIcon(this); })
        .mouseout(function () { addPlusIcon(this); });
    }

    //Hide the other panels
    $(".accordion-content").not($(this).next()).slideUp('fast');

    // Reset icon to plus on other panels
    addPlusIcon($('.accordion-toggle').not($(this)));
    $('.accordion-toggle').not($(this)).mouseover(function () {
      addPlusHoverIcon(this);
    }).mouseout(function () {
      addPlusIcon(this);
    });

  });

}


// Plus and Minus Icons

function addMinusIcon(faq) {
  $(faq).css('background-image', 'url(/images/faqs/minus-icon.png)');
  $(faq).css('background-image', '-webkit-image-set(url(/images/faqs/minus-icon.png) 1x, url(/images/faqs/minus-icon%402x.png) 2x, url(/images/faqs/minus-icon%403x.png) 3x)');
}

function addMinusHoverIcon(faq) {
  $(faq).css('background-image', 'url(/images/faqs/minus-icon-hover.png)');
  $(faq).css('background-image', '-webkit-image-set(url(/images/faqs/minus-icon-hover.png) 1x, url(/images/faqs/minus-icon-hover%402x.png) 2x, url(/images/faqs/minus-icon-hover%403x.png) 3x)');
}

function addPlusIcon(faq) {
  $(faq).css('background-image', 'url(/images/faqs/plus-icon.png)');
  $(faq).css('background-image', '-webkit-image-set(url(/images/faqs/plus-icon.png) 1x, url(/images/faqs/plus-icon%402x.png) 2x, url(/images/faqs/plus-icon%403x.png) 3x)');
}

function addPlusHoverIcon(faq) {
  $(faq).css('background-image', 'url(/images/faqs/plus-icon-hover.png)');
  $(faq).css('background-image', '-webkit-image-set(url(/images/faqs/plus-icon-hover.png) 1x, url(/images/faqs/plus-icon-hover%402x.png) 2x, url(/images/faqs/plus-icon-hover%403x.png) 3x)');
}


// Back to top hover
$('.back-to-top__img').mouseover(function () {
  $(this).prop('src', '/images/faqs/back-to-top-icon-hover.png');
  $(this).prop('srcset', '/images/faqs/back-to-top-icon-hover%402x.png 2x, /images/faqs/back-to-top-icon-hover%403x.png 3x');
}).mouseout(function () {
  $(this).prop('src', '/images/faqs/back-to-top-icon.png');
  $(this).prop('srcset', '/images/faqs/back-to-top-icon%402x.png 2x, /images/faqs/back-to-top-icon%403x.png 3x');
});

// Back to top action
$('.back-to-top__img').click(function (e) {
  e.preventDefault();
  $('html,body').animate({
    scrollTop: 0
  }, 'fast');
});
